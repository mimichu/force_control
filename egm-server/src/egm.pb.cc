// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: egm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "egm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace abb {
namespace egm {

namespace {

const ::google::protobuf::Descriptor* EgmHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EgmHeader_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EgmCartesian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmCartesian_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmQuaternion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmQuaternion_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmEuler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmEuler_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmPose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmPose_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmCartesianSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmCartesianSpeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmJoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmJoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmExternalJoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmExternalJoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmPlanned_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmPlanned_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmSpeedRef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmSpeedRef_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmPathCorr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmPathCorr_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmFeedBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmFeedBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmMotorState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmMotorState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EgmMotorState_MotorStateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EgmMCIState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmMCIState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EgmMCIState_MCIStateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EgmRapidCtrlExecState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmRapidCtrlExecState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EgmRapidCtrlExecState_RapidCtrlExecStateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EgmTestSignals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmTestSignals_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmSensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* EgmSensorPathCorr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EgmSensorPathCorr_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_egm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_egm_2eproto() {
  protobuf_AddDesc_egm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "egm.proto");
  GOOGLE_CHECK(file != NULL);
  EgmHeader_descriptor_ = file->message_type(0);
  static const int EgmHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmHeader, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmHeader, tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmHeader, mtype_),
  };
  EgmHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmHeader_descriptor_,
      EgmHeader::internal_default_instance(),
      EgmHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmHeader, _has_bits_),
      -1,
      -1,
      sizeof(EgmHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmHeader, _internal_metadata_));
  EgmHeader_MessageType_descriptor_ = EgmHeader_descriptor_->enum_type(0);
  EgmCartesian_descriptor_ = file->message_type(1);
  static const int EgmCartesian_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmCartesian, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmCartesian, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmCartesian, z_),
  };
  EgmCartesian_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmCartesian_descriptor_,
      EgmCartesian::internal_default_instance(),
      EgmCartesian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmCartesian, _has_bits_),
      -1,
      -1,
      sizeof(EgmCartesian),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmCartesian, _internal_metadata_));
  EgmQuaternion_descriptor_ = file->message_type(2);
  static const int EgmQuaternion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmQuaternion, u0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmQuaternion, u1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmQuaternion, u2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmQuaternion, u3_),
  };
  EgmQuaternion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmQuaternion_descriptor_,
      EgmQuaternion::internal_default_instance(),
      EgmQuaternion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmQuaternion, _has_bits_),
      -1,
      -1,
      sizeof(EgmQuaternion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmQuaternion, _internal_metadata_));
  EgmEuler_descriptor_ = file->message_type(3);
  static const int EgmEuler_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmEuler, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmEuler, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmEuler, z_),
  };
  EgmEuler_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmEuler_descriptor_,
      EgmEuler::internal_default_instance(),
      EgmEuler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmEuler, _has_bits_),
      -1,
      -1,
      sizeof(EgmEuler),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmEuler, _internal_metadata_));
  EgmPose_descriptor_ = file->message_type(4);
  static const int EgmPose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPose, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPose, orient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPose, euler_),
  };
  EgmPose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmPose_descriptor_,
      EgmPose::internal_default_instance(),
      EgmPose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPose, _has_bits_),
      -1,
      -1,
      sizeof(EgmPose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPose, _internal_metadata_));
  EgmCartesianSpeed_descriptor_ = file->message_type(5);
  static const int EgmCartesianSpeed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmCartesianSpeed, value_),
  };
  EgmCartesianSpeed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmCartesianSpeed_descriptor_,
      EgmCartesianSpeed::internal_default_instance(),
      EgmCartesianSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmCartesianSpeed, _has_bits_),
      -1,
      -1,
      sizeof(EgmCartesianSpeed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmCartesianSpeed, _internal_metadata_));
  EgmJoints_descriptor_ = file->message_type(6);
  static const int EgmJoints_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmJoints, joints_),
  };
  EgmJoints_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmJoints_descriptor_,
      EgmJoints::internal_default_instance(),
      EgmJoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmJoints, _has_bits_),
      -1,
      -1,
      sizeof(EgmJoints),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmJoints, _internal_metadata_));
  EgmExternalJoints_descriptor_ = file->message_type(7);
  static const int EgmExternalJoints_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmExternalJoints, joints_),
  };
  EgmExternalJoints_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmExternalJoints_descriptor_,
      EgmExternalJoints::internal_default_instance(),
      EgmExternalJoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmExternalJoints, _has_bits_),
      -1,
      -1,
      sizeof(EgmExternalJoints),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmExternalJoints, _internal_metadata_));
  EgmPlanned_descriptor_ = file->message_type(8);
  static const int EgmPlanned_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPlanned, joints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPlanned, cartesian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPlanned, externaljoints_),
  };
  EgmPlanned_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmPlanned_descriptor_,
      EgmPlanned::internal_default_instance(),
      EgmPlanned_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPlanned, _has_bits_),
      -1,
      -1,
      sizeof(EgmPlanned),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPlanned, _internal_metadata_));
  EgmSpeedRef_descriptor_ = file->message_type(9);
  static const int EgmSpeedRef_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSpeedRef, joints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSpeedRef, cartesians_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSpeedRef, externaljoints_),
  };
  EgmSpeedRef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmSpeedRef_descriptor_,
      EgmSpeedRef::internal_default_instance(),
      EgmSpeedRef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSpeedRef, _has_bits_),
      -1,
      -1,
      sizeof(EgmSpeedRef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSpeedRef, _internal_metadata_));
  EgmPathCorr_descriptor_ = file->message_type(10);
  static const int EgmPathCorr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPathCorr, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPathCorr, age_),
  };
  EgmPathCorr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmPathCorr_descriptor_,
      EgmPathCorr::internal_default_instance(),
      EgmPathCorr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPathCorr, _has_bits_),
      -1,
      -1,
      sizeof(EgmPathCorr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmPathCorr, _internal_metadata_));
  EgmFeedBack_descriptor_ = file->message_type(11);
  static const int EgmFeedBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmFeedBack, joints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmFeedBack, cartesian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmFeedBack, externaljoints_),
  };
  EgmFeedBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmFeedBack_descriptor_,
      EgmFeedBack::internal_default_instance(),
      EgmFeedBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmFeedBack, _has_bits_),
      -1,
      -1,
      sizeof(EgmFeedBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmFeedBack, _internal_metadata_));
  EgmMotorState_descriptor_ = file->message_type(12);
  static const int EgmMotorState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmMotorState, state_),
  };
  EgmMotorState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmMotorState_descriptor_,
      EgmMotorState::internal_default_instance(),
      EgmMotorState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmMotorState, _has_bits_),
      -1,
      -1,
      sizeof(EgmMotorState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmMotorState, _internal_metadata_));
  EgmMotorState_MotorStateType_descriptor_ = EgmMotorState_descriptor_->enum_type(0);
  EgmMCIState_descriptor_ = file->message_type(13);
  static const int EgmMCIState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmMCIState, state_),
  };
  EgmMCIState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmMCIState_descriptor_,
      EgmMCIState::internal_default_instance(),
      EgmMCIState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmMCIState, _has_bits_),
      -1,
      -1,
      sizeof(EgmMCIState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmMCIState, _internal_metadata_));
  EgmMCIState_MCIStateType_descriptor_ = EgmMCIState_descriptor_->enum_type(0);
  EgmRapidCtrlExecState_descriptor_ = file->message_type(14);
  static const int EgmRapidCtrlExecState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRapidCtrlExecState, state_),
  };
  EgmRapidCtrlExecState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmRapidCtrlExecState_descriptor_,
      EgmRapidCtrlExecState::internal_default_instance(),
      EgmRapidCtrlExecState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRapidCtrlExecState, _has_bits_),
      -1,
      -1,
      sizeof(EgmRapidCtrlExecState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRapidCtrlExecState, _internal_metadata_));
  EgmRapidCtrlExecState_RapidCtrlExecStateType_descriptor_ = EgmRapidCtrlExecState_descriptor_->enum_type(0);
  EgmTestSignals_descriptor_ = file->message_type(15);
  static const int EgmTestSignals_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmTestSignals, signals_),
  };
  EgmTestSignals_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmTestSignals_descriptor_,
      EgmTestSignals::internal_default_instance(),
      EgmTestSignals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmTestSignals, _has_bits_),
      -1,
      -1,
      sizeof(EgmTestSignals),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmTestSignals, _internal_metadata_));
  EgmRobot_descriptor_ = file->message_type(16);
  static const int EgmRobot_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRobot, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRobot, feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRobot, planned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRobot, motorstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRobot, mcistate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRobot, mciconvergencemet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRobot, testsignals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRobot, rapidexecstate_),
  };
  EgmRobot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmRobot_descriptor_,
      EgmRobot::internal_default_instance(),
      EgmRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRobot, _has_bits_),
      -1,
      -1,
      sizeof(EgmRobot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmRobot, _internal_metadata_));
  EgmSensor_descriptor_ = file->message_type(17);
  static const int EgmSensor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSensor, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSensor, planned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSensor, speedref_),
  };
  EgmSensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmSensor_descriptor_,
      EgmSensor::internal_default_instance(),
      EgmSensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSensor, _has_bits_),
      -1,
      -1,
      sizeof(EgmSensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSensor, _internal_metadata_));
  EgmSensorPathCorr_descriptor_ = file->message_type(18);
  static const int EgmSensorPathCorr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSensorPathCorr, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSensorPathCorr, pathcorr_),
  };
  EgmSensorPathCorr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EgmSensorPathCorr_descriptor_,
      EgmSensorPathCorr::internal_default_instance(),
      EgmSensorPathCorr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSensorPathCorr, _has_bits_),
      -1,
      -1,
      sizeof(EgmSensorPathCorr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EgmSensorPathCorr, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_egm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmHeader_descriptor_, EgmHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmCartesian_descriptor_, EgmCartesian::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmQuaternion_descriptor_, EgmQuaternion::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmEuler_descriptor_, EgmEuler::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmPose_descriptor_, EgmPose::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmCartesianSpeed_descriptor_, EgmCartesianSpeed::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmJoints_descriptor_, EgmJoints::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmExternalJoints_descriptor_, EgmExternalJoints::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmPlanned_descriptor_, EgmPlanned::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmSpeedRef_descriptor_, EgmSpeedRef::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmPathCorr_descriptor_, EgmPathCorr::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmFeedBack_descriptor_, EgmFeedBack::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmMotorState_descriptor_, EgmMotorState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmMCIState_descriptor_, EgmMCIState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmRapidCtrlExecState_descriptor_, EgmRapidCtrlExecState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmTestSignals_descriptor_, EgmTestSignals::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmRobot_descriptor_, EgmRobot::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmSensor_descriptor_, EgmSensor::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EgmSensorPathCorr_descriptor_, EgmSensorPathCorr::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_egm_2eproto() {
  EgmHeader_default_instance_.Shutdown();
  delete EgmHeader_reflection_;
  EgmCartesian_default_instance_.Shutdown();
  delete EgmCartesian_reflection_;
  EgmQuaternion_default_instance_.Shutdown();
  delete EgmQuaternion_reflection_;
  EgmEuler_default_instance_.Shutdown();
  delete EgmEuler_reflection_;
  EgmPose_default_instance_.Shutdown();
  delete EgmPose_reflection_;
  EgmCartesianSpeed_default_instance_.Shutdown();
  delete EgmCartesianSpeed_reflection_;
  EgmJoints_default_instance_.Shutdown();
  delete EgmJoints_reflection_;
  EgmExternalJoints_default_instance_.Shutdown();
  delete EgmExternalJoints_reflection_;
  EgmPlanned_default_instance_.Shutdown();
  delete EgmPlanned_reflection_;
  EgmSpeedRef_default_instance_.Shutdown();
  delete EgmSpeedRef_reflection_;
  EgmPathCorr_default_instance_.Shutdown();
  delete EgmPathCorr_reflection_;
  EgmFeedBack_default_instance_.Shutdown();
  delete EgmFeedBack_reflection_;
  EgmMotorState_default_instance_.Shutdown();
  delete EgmMotorState_reflection_;
  EgmMCIState_default_instance_.Shutdown();
  delete EgmMCIState_reflection_;
  EgmRapidCtrlExecState_default_instance_.Shutdown();
  delete EgmRapidCtrlExecState_reflection_;
  EgmTestSignals_default_instance_.Shutdown();
  delete EgmTestSignals_reflection_;
  EgmRobot_default_instance_.Shutdown();
  delete EgmRobot_reflection_;
  EgmSensor_default_instance_.Shutdown();
  delete EgmSensor_reflection_;
  EgmSensorPathCorr_default_instance_.Shutdown();
  delete EgmSensorPathCorr_reflection_;
}

void protobuf_InitDefaults_egm_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  EgmHeader_default_instance_.DefaultConstruct();
  EgmCartesian_default_instance_.DefaultConstruct();
  EgmQuaternion_default_instance_.DefaultConstruct();
  EgmEuler_default_instance_.DefaultConstruct();
  EgmPose_default_instance_.DefaultConstruct();
  EgmCartesianSpeed_default_instance_.DefaultConstruct();
  EgmJoints_default_instance_.DefaultConstruct();
  EgmExternalJoints_default_instance_.DefaultConstruct();
  EgmPlanned_default_instance_.DefaultConstruct();
  EgmSpeedRef_default_instance_.DefaultConstruct();
  EgmPathCorr_default_instance_.DefaultConstruct();
  EgmFeedBack_default_instance_.DefaultConstruct();
  EgmMotorState_default_instance_.DefaultConstruct();
  EgmMCIState_default_instance_.DefaultConstruct();
  EgmRapidCtrlExecState_default_instance_.DefaultConstruct();
  EgmTestSignals_default_instance_.DefaultConstruct();
  EgmRobot_default_instance_.DefaultConstruct();
  EgmSensor_default_instance_.DefaultConstruct();
  EgmSensorPathCorr_default_instance_.DefaultConstruct();
  EgmHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmCartesian_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmQuaternion_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmEuler_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmPose_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmCartesianSpeed_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmJoints_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmExternalJoints_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmPlanned_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmSpeedRef_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmPathCorr_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmFeedBack_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmMotorState_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmMCIState_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmRapidCtrlExecState_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmTestSignals_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmRobot_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmSensor_default_instance_.get_mutable()->InitAsDefaultInstance();
  EgmSensorPathCorr_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_egm_2eproto_once_);
void protobuf_InitDefaults_egm_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_egm_2eproto_once_,
                 &protobuf_InitDefaults_egm_2eproto_impl);
}
void protobuf_AddDesc_egm_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_egm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tegm.proto\022\007abb.egm\"\353\001\n\tEgmHeader\022\r\n\005se"
    "qno\030\001 \001(\r\022\n\n\002tm\030\002 \001(\r\022@\n\005mtype\030\003 \001(\0162\036.a"
    "bb.egm.EgmHeader.MessageType:\021MSGTYPE_UN"
    "DEFINED\"\200\001\n\013MessageType\022\025\n\021MSGTYPE_UNDEF"
    "INED\020\000\022\023\n\017MSGTYPE_COMMAND\020\001\022\020\n\014MSGTYPE_D"
    "ATA\020\002\022\026\n\022MSGTYPE_CORRECTION\020\003\022\033\n\027MSGTYPE"
    "_PATH_CORRECTION\020\004\"/\n\014EgmCartesian\022\t\n\001x\030"
    "\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"\?\n\rEgmQuater"
    "nion\022\n\n\002u0\030\001 \002(\001\022\n\n\002u1\030\002 \002(\001\022\n\n\002u2\030\003 \002(\001"
    "\022\n\n\002u3\030\004 \002(\001\"+\n\010EgmEuler\022\t\n\001x\030\001 \002(\001\022\t\n\001y"
    "\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"w\n\007EgmPose\022\"\n\003pos\030\001 \001("
    "\0132\025.abb.egm.EgmCartesian\022&\n\006orient\030\002 \001(\013"
    "2\026.abb.egm.EgmQuaternion\022 \n\005euler\030\003 \001(\0132"
    "\021.abb.egm.EgmEuler\"\"\n\021EgmCartesianSpeed\022"
    "\r\n\005value\030\001 \003(\001\"\033\n\tEgmJoints\022\016\n\006joints\030\001 "
    "\003(\001\"#\n\021EgmExternalJoints\022\016\n\006joints\030\001 \003(\001"
    "\"\201\001\n\nEgmPlanned\022\"\n\006joints\030\001 \001(\0132\022.abb.eg"
    "m.EgmJoints\022#\n\tcartesian\030\002 \001(\0132\020.abb.egm"
    ".EgmPose\022*\n\016externalJoints\030\003 \001(\0132\022.abb.e"
    "gm.EgmJoints\"\215\001\n\013EgmSpeedRef\022\"\n\006joints\030\001"
    " \001(\0132\022.abb.egm.EgmJoints\022.\n\ncartesians\030\002"
    " \001(\0132\032.abb.egm.EgmCartesianSpeed\022*\n\016exte"
    "rnalJoints\030\003 \001(\0132\022.abb.egm.EgmJoints\">\n\013"
    "EgmPathCorr\022\"\n\003pos\030\001 \002(\0132\025.abb.egm.EgmCa"
    "rtesian\022\013\n\003age\030\002 \002(\r\"\202\001\n\013EgmFeedBack\022\"\n\006"
    "joints\030\001 \001(\0132\022.abb.egm.EgmJoints\022#\n\tcart"
    "esian\030\002 \001(\0132\020.abb.egm.EgmPose\022*\n\016externa"
    "lJoints\030\003 \001(\0132\022.abb.egm.EgmJoints\"\214\001\n\rEg"
    "mMotorState\0224\n\005state\030\001 \002(\0162%.abb.egm.Egm"
    "MotorState.MotorStateType\"E\n\016MotorStateT"
    "ype\022\024\n\020MOTORS_UNDEFINED\020\000\022\r\n\tMOTORS_ON\020\001"
    "\022\016\n\nMOTORS_OFF\020\002\"\242\001\n\013EgmMCIState\022\?\n\005stat"
    "e\030\001 \002(\0162!.abb.egm.EgmMCIState.MCIStateTy"
    "pe:\rMCI_UNDEFINED\"R\n\014MCIStateType\022\021\n\rMCI"
    "_UNDEFINED\020\000\022\r\n\tMCI_ERROR\020\001\022\017\n\013MCI_STOPP"
    "ED\020\002\022\017\n\013MCI_RUNNING\020\003\"\303\001\n\025EgmRapidCtrlEx"
    "ecState\022U\n\005state\030\001 \002(\01625.abb.egm.EgmRapi"
    "dCtrlExecState.RapidCtrlExecStateType:\017R"
    "APID_UNDEFINED\"S\n\026RapidCtrlExecStateType"
    "\022\023\n\017RAPID_UNDEFINED\020\000\022\021\n\rRAPID_STOPPED\020\001"
    "\022\021\n\rRAPID_RUNNING\020\002\"!\n\016EgmTestSignals\022\017\n"
    "\007signals\030\001 \003(\001\"\321\002\n\010EgmRobot\022\"\n\006header\030\001 "
    "\001(\0132\022.abb.egm.EgmHeader\022&\n\010feedBack\030\002 \001("
    "\0132\024.abb.egm.EgmFeedBack\022$\n\007planned\030\003 \001(\013"
    "2\023.abb.egm.EgmPlanned\022*\n\nmotorState\030\004 \001("
    "\0132\026.abb.egm.EgmMotorState\022&\n\010mciState\030\005 "
    "\001(\0132\024.abb.egm.EgmMCIState\022\031\n\021mciConverge"
    "nceMet\030\006 \001(\010\022,\n\013testSignals\030\007 \001(\0132\027.abb."
    "egm.EgmTestSignals\0226\n\016rapidExecState\030\010 \001"
    "(\0132\036.abb.egm.EgmRapidCtrlExecState\"}\n\tEg"
    "mSensor\022\"\n\006header\030\001 \001(\0132\022.abb.egm.EgmHea"
    "der\022$\n\007planned\030\002 \001(\0132\023.abb.egm.EgmPlanne"
    "d\022&\n\010speedRef\030\003 \001(\0132\024.abb.egm.EgmSpeedRe"
    "f\"_\n\021EgmSensorPathCorr\022\"\n\006header\030\001 \001(\0132\022"
    ".abb.egm.EgmHeader\022&\n\010pathCorr\030\002 \001(\0132\024.a"
    "bb.egm.EgmPathCorr", 2218);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "egm.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_egm_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_egm_2eproto_once_);
void protobuf_AddDesc_egm_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_egm_2eproto_once_,
                 &protobuf_AddDesc_egm_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_egm_2eproto {
  StaticDescriptorInitializer_egm_2eproto() {
    protobuf_AddDesc_egm_2eproto();
  }
} static_descriptor_initializer_egm_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* EgmHeader_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmHeader_MessageType_descriptor_;
}
bool EgmHeader_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EgmHeader_MessageType EgmHeader::MSGTYPE_UNDEFINED;
const EgmHeader_MessageType EgmHeader::MSGTYPE_COMMAND;
const EgmHeader_MessageType EgmHeader::MSGTYPE_DATA;
const EgmHeader_MessageType EgmHeader::MSGTYPE_CORRECTION;
const EgmHeader_MessageType EgmHeader::MSGTYPE_PATH_CORRECTION;
const EgmHeader_MessageType EgmHeader::MessageType_MIN;
const EgmHeader_MessageType EgmHeader::MessageType_MAX;
const int EgmHeader::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmHeader::kSeqnoFieldNumber;
const int EgmHeader::kTmFieldNumber;
const int EgmHeader::kMtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmHeader::EgmHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmHeader)
}

void EgmHeader::InitAsDefaultInstance() {
}

EgmHeader::EgmHeader(const EgmHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmHeader)
}

void EgmHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&seqno_, 0, reinterpret_cast<char*>(&mtype_) -
    reinterpret_cast<char*>(&seqno_) + sizeof(mtype_));
}

EgmHeader::~EgmHeader() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmHeader)
  SharedDtor();
}

void EgmHeader::SharedDtor() {
}

void EgmHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmHeader_descriptor_;
}

const EgmHeader& EgmHeader::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmHeader> EgmHeader_default_instance_;

EgmHeader* EgmHeader::New(::google::protobuf::Arena* arena) const {
  EgmHeader* n = new EgmHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EgmHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EgmHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seqno_, mtype_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seqno = 1;
      case 1: {
        if (tag == 8) {
          set_has_seqno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seqno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tm;
        break;
      }

      // optional uint32 tm = 2;
      case 2: {
        if (tag == 16) {
         parse_tm:
          set_has_tm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tm_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mtype;
        break;
      }

      // optional .abb.egm.EgmHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
      case 3: {
        if (tag == 24) {
         parse_mtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::abb::egm::EgmHeader_MessageType_IsValid(value)) {
            set_mtype(static_cast< ::abb::egm::EgmHeader_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmHeader)
  return false;
#undef DO_
}

void EgmHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmHeader)
  // optional uint32 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seqno(), output);
  }

  // optional uint32 tm = 2;
  if (has_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tm(), output);
  }

  // optional .abb.egm.EgmHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmHeader)
}

::google::protobuf::uint8* EgmHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmHeader)
  // optional uint32 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seqno(), target);
  }

  // optional uint32 tm = 2;
  if (has_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tm(), target);
  }

  // optional .abb.egm.EgmHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmHeader)
  return target;
}

size_t EgmHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmHeader)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 seqno = 1;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seqno());
    }

    // optional uint32 tm = 2;
    if (has_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tm());
    }

    // optional .abb.egm.EgmHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mtype());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmHeader)
    UnsafeMergeFrom(*source);
  }
}

void EgmHeader::MergeFrom(const EgmHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmHeader::UnsafeMergeFrom(const EgmHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_tm()) {
      set_tm(from.tm());
    }
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmHeader::CopyFrom(const EgmHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmHeader::IsInitialized() const {

  return true;
}

void EgmHeader::Swap(EgmHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmHeader::InternalSwap(EgmHeader* other) {
  std::swap(seqno_, other->seqno_);
  std::swap(tm_, other->tm_);
  std::swap(mtype_, other->mtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmHeader_descriptor_;
  metadata.reflection = EgmHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmHeader

// optional uint32 seqno = 1;
bool EgmHeader::has_seqno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmHeader::set_has_seqno() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmHeader::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmHeader::clear_seqno() {
  seqno_ = 0u;
  clear_has_seqno();
}
::google::protobuf::uint32 EgmHeader::seqno() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmHeader.seqno)
  return seqno_;
}
void EgmHeader::set_seqno(::google::protobuf::uint32 value) {
  set_has_seqno();
  seqno_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmHeader.seqno)
}

// optional uint32 tm = 2;
bool EgmHeader::has_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmHeader::set_has_tm() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmHeader::clear_has_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmHeader::clear_tm() {
  tm_ = 0u;
  clear_has_tm();
}
::google::protobuf::uint32 EgmHeader::tm() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmHeader.tm)
  return tm_;
}
void EgmHeader::set_tm(::google::protobuf::uint32 value) {
  set_has_tm();
  tm_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmHeader.tm)
}

// optional .abb.egm.EgmHeader.MessageType mtype = 3 [default = MSGTYPE_UNDEFINED];
bool EgmHeader::has_mtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgmHeader::set_has_mtype() {
  _has_bits_[0] |= 0x00000004u;
}
void EgmHeader::clear_has_mtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgmHeader::clear_mtype() {
  mtype_ = 0;
  clear_has_mtype();
}
::abb::egm::EgmHeader_MessageType EgmHeader::mtype() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmHeader.mtype)
  return static_cast< ::abb::egm::EgmHeader_MessageType >(mtype_);
}
void EgmHeader::set_mtype(::abb::egm::EgmHeader_MessageType value) {
  assert(::abb::egm::EgmHeader_MessageType_IsValid(value));
  set_has_mtype();
  mtype_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmHeader.mtype)
}

inline const EgmHeader* EgmHeader::internal_default_instance() {
  return &EgmHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmCartesian::kXFieldNumber;
const int EgmCartesian::kYFieldNumber;
const int EgmCartesian::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmCartesian::EgmCartesian()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmCartesian)
}

void EgmCartesian::InitAsDefaultInstance() {
}

EgmCartesian::EgmCartesian(const EgmCartesian& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmCartesian)
}

void EgmCartesian::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

EgmCartesian::~EgmCartesian() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmCartesian)
  SharedDtor();
}

void EgmCartesian::SharedDtor() {
}

void EgmCartesian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmCartesian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmCartesian_descriptor_;
}

const EgmCartesian& EgmCartesian::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmCartesian> EgmCartesian_default_instance_;

EgmCartesian* EgmCartesian::New(::google::protobuf::Arena* arena) const {
  EgmCartesian* n = new EgmCartesian;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmCartesian::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmCartesian)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EgmCartesian, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EgmCartesian*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmCartesian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmCartesian)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmCartesian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmCartesian)
  return false;
#undef DO_
}

void EgmCartesian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmCartesian)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmCartesian)
}

::google::protobuf::uint8* EgmCartesian::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmCartesian)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmCartesian)
  return target;
}

size_t EgmCartesian::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:abb.egm.EgmCartesian)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t EgmCartesian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmCartesian)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmCartesian::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmCartesian)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmCartesian* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmCartesian>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmCartesian)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmCartesian)
    UnsafeMergeFrom(*source);
  }
}

void EgmCartesian::MergeFrom(const EgmCartesian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmCartesian)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmCartesian::UnsafeMergeFrom(const EgmCartesian& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmCartesian::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmCartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmCartesian::CopyFrom(const EgmCartesian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmCartesian)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmCartesian::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EgmCartesian::Swap(EgmCartesian* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmCartesian::InternalSwap(EgmCartesian* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmCartesian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmCartesian_descriptor_;
  metadata.reflection = EgmCartesian_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmCartesian

// required double x = 1;
bool EgmCartesian::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmCartesian::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmCartesian::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmCartesian::clear_x() {
  x_ = 0;
  clear_has_x();
}
double EgmCartesian::x() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmCartesian.x)
  return x_;
}
void EgmCartesian::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmCartesian.x)
}

// required double y = 2;
bool EgmCartesian::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmCartesian::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmCartesian::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmCartesian::clear_y() {
  y_ = 0;
  clear_has_y();
}
double EgmCartesian::y() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmCartesian.y)
  return y_;
}
void EgmCartesian::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmCartesian.y)
}

// required double z = 3;
bool EgmCartesian::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgmCartesian::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void EgmCartesian::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgmCartesian::clear_z() {
  z_ = 0;
  clear_has_z();
}
double EgmCartesian::z() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmCartesian.z)
  return z_;
}
void EgmCartesian::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmCartesian.z)
}

inline const EgmCartesian* EgmCartesian::internal_default_instance() {
  return &EgmCartesian_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmQuaternion::kU0FieldNumber;
const int EgmQuaternion::kU1FieldNumber;
const int EgmQuaternion::kU2FieldNumber;
const int EgmQuaternion::kU3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmQuaternion::EgmQuaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmQuaternion)
}

void EgmQuaternion::InitAsDefaultInstance() {
}

EgmQuaternion::EgmQuaternion(const EgmQuaternion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmQuaternion)
}

void EgmQuaternion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&u0_, 0, reinterpret_cast<char*>(&u3_) -
    reinterpret_cast<char*>(&u0_) + sizeof(u3_));
}

EgmQuaternion::~EgmQuaternion() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmQuaternion)
  SharedDtor();
}

void EgmQuaternion::SharedDtor() {
}

void EgmQuaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmQuaternion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmQuaternion_descriptor_;
}

const EgmQuaternion& EgmQuaternion::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmQuaternion> EgmQuaternion_default_instance_;

EgmQuaternion* EgmQuaternion::New(::google::protobuf::Arena* arena) const {
  EgmQuaternion* n = new EgmQuaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmQuaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmQuaternion)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EgmQuaternion, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EgmQuaternion*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(u0_, u3_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmQuaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmQuaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double u0 = 1;
      case 1: {
        if (tag == 9) {
          set_has_u0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u0_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_u1;
        break;
      }

      // required double u1 = 2;
      case 2: {
        if (tag == 17) {
         parse_u1:
          set_has_u1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_u2;
        break;
      }

      // required double u2 = 3;
      case 3: {
        if (tag == 25) {
         parse_u2:
          set_has_u2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_u3;
        break;
      }

      // required double u3 = 4;
      case 4: {
        if (tag == 33) {
         parse_u3:
          set_has_u3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u3_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmQuaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmQuaternion)
  return false;
#undef DO_
}

void EgmQuaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmQuaternion)
  // required double u0 = 1;
  if (has_u0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->u0(), output);
  }

  // required double u1 = 2;
  if (has_u1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->u1(), output);
  }

  // required double u2 = 3;
  if (has_u2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->u2(), output);
  }

  // required double u3 = 4;
  if (has_u3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->u3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmQuaternion)
}

::google::protobuf::uint8* EgmQuaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmQuaternion)
  // required double u0 = 1;
  if (has_u0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->u0(), target);
  }

  // required double u1 = 2;
  if (has_u1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->u1(), target);
  }

  // required double u2 = 3;
  if (has_u2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->u2(), target);
  }

  // required double u3 = 4;
  if (has_u3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->u3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmQuaternion)
  return target;
}

size_t EgmQuaternion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:abb.egm.EgmQuaternion)
  size_t total_size = 0;

  if (has_u0()) {
    // required double u0 = 1;
    total_size += 1 + 8;
  }

  if (has_u1()) {
    // required double u1 = 2;
    total_size += 1 + 8;
  }

  if (has_u2()) {
    // required double u2 = 3;
    total_size += 1 + 8;
  }

  if (has_u3()) {
    // required double u3 = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t EgmQuaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmQuaternion)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double u0 = 1;
    total_size += 1 + 8;

    // required double u1 = 2;
    total_size += 1 + 8;

    // required double u2 = 3;
    total_size += 1 + 8;

    // required double u3 = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmQuaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmQuaternion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmQuaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmQuaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmQuaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmQuaternion)
    UnsafeMergeFrom(*source);
  }
}

void EgmQuaternion::MergeFrom(const EgmQuaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmQuaternion)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmQuaternion::UnsafeMergeFrom(const EgmQuaternion& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_u0()) {
      set_u0(from.u0());
    }
    if (from.has_u1()) {
      set_u1(from.u1());
    }
    if (from.has_u2()) {
      set_u2(from.u2());
    }
    if (from.has_u3()) {
      set_u3(from.u3());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmQuaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmQuaternion::CopyFrom(const EgmQuaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmQuaternion)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmQuaternion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void EgmQuaternion::Swap(EgmQuaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmQuaternion::InternalSwap(EgmQuaternion* other) {
  std::swap(u0_, other->u0_);
  std::swap(u1_, other->u1_);
  std::swap(u2_, other->u2_);
  std::swap(u3_, other->u3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmQuaternion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmQuaternion_descriptor_;
  metadata.reflection = EgmQuaternion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmQuaternion

// required double u0 = 1;
bool EgmQuaternion::has_u0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmQuaternion::set_has_u0() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmQuaternion::clear_has_u0() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmQuaternion::clear_u0() {
  u0_ = 0;
  clear_has_u0();
}
double EgmQuaternion::u0() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmQuaternion.u0)
  return u0_;
}
void EgmQuaternion::set_u0(double value) {
  set_has_u0();
  u0_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmQuaternion.u0)
}

// required double u1 = 2;
bool EgmQuaternion::has_u1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmQuaternion::set_has_u1() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmQuaternion::clear_has_u1() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmQuaternion::clear_u1() {
  u1_ = 0;
  clear_has_u1();
}
double EgmQuaternion::u1() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmQuaternion.u1)
  return u1_;
}
void EgmQuaternion::set_u1(double value) {
  set_has_u1();
  u1_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmQuaternion.u1)
}

// required double u2 = 3;
bool EgmQuaternion::has_u2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgmQuaternion::set_has_u2() {
  _has_bits_[0] |= 0x00000004u;
}
void EgmQuaternion::clear_has_u2() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgmQuaternion::clear_u2() {
  u2_ = 0;
  clear_has_u2();
}
double EgmQuaternion::u2() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmQuaternion.u2)
  return u2_;
}
void EgmQuaternion::set_u2(double value) {
  set_has_u2();
  u2_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmQuaternion.u2)
}

// required double u3 = 4;
bool EgmQuaternion::has_u3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EgmQuaternion::set_has_u3() {
  _has_bits_[0] |= 0x00000008u;
}
void EgmQuaternion::clear_has_u3() {
  _has_bits_[0] &= ~0x00000008u;
}
void EgmQuaternion::clear_u3() {
  u3_ = 0;
  clear_has_u3();
}
double EgmQuaternion::u3() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmQuaternion.u3)
  return u3_;
}
void EgmQuaternion::set_u3(double value) {
  set_has_u3();
  u3_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmQuaternion.u3)
}

inline const EgmQuaternion* EgmQuaternion::internal_default_instance() {
  return &EgmQuaternion_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmEuler::kXFieldNumber;
const int EgmEuler::kYFieldNumber;
const int EgmEuler::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmEuler::EgmEuler()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmEuler)
}

void EgmEuler::InitAsDefaultInstance() {
}

EgmEuler::EgmEuler(const EgmEuler& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmEuler)
}

void EgmEuler::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

EgmEuler::~EgmEuler() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmEuler)
  SharedDtor();
}

void EgmEuler::SharedDtor() {
}

void EgmEuler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmEuler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmEuler_descriptor_;
}

const EgmEuler& EgmEuler::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmEuler> EgmEuler_default_instance_;

EgmEuler* EgmEuler::New(::google::protobuf::Arena* arena) const {
  EgmEuler* n = new EgmEuler;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmEuler::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmEuler)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EgmEuler, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EgmEuler*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmEuler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmEuler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmEuler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmEuler)
  return false;
#undef DO_
}

void EgmEuler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmEuler)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmEuler)
}

::google::protobuf::uint8* EgmEuler::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmEuler)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmEuler)
  return target;
}

size_t EgmEuler::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:abb.egm.EgmEuler)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t EgmEuler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmEuler)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmEuler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmEuler)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmEuler* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmEuler>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmEuler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmEuler)
    UnsafeMergeFrom(*source);
  }
}

void EgmEuler::MergeFrom(const EgmEuler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmEuler)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmEuler::UnsafeMergeFrom(const EgmEuler& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmEuler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmEuler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmEuler::CopyFrom(const EgmEuler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmEuler)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmEuler::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EgmEuler::Swap(EgmEuler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmEuler::InternalSwap(EgmEuler* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmEuler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmEuler_descriptor_;
  metadata.reflection = EgmEuler_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmEuler

// required double x = 1;
bool EgmEuler::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmEuler::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmEuler::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmEuler::clear_x() {
  x_ = 0;
  clear_has_x();
}
double EgmEuler::x() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmEuler.x)
  return x_;
}
void EgmEuler::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmEuler.x)
}

// required double y = 2;
bool EgmEuler::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmEuler::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmEuler::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmEuler::clear_y() {
  y_ = 0;
  clear_has_y();
}
double EgmEuler::y() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmEuler.y)
  return y_;
}
void EgmEuler::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmEuler.y)
}

// required double z = 3;
bool EgmEuler::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgmEuler::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void EgmEuler::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgmEuler::clear_z() {
  z_ = 0;
  clear_has_z();
}
double EgmEuler::z() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmEuler.z)
  return z_;
}
void EgmEuler::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmEuler.z)
}

inline const EgmEuler* EgmEuler::internal_default_instance() {
  return &EgmEuler_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmPose::kPosFieldNumber;
const int EgmPose::kOrientFieldNumber;
const int EgmPose::kEulerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmPose::EgmPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmPose)
}

void EgmPose::InitAsDefaultInstance() {
  pos_ = const_cast< ::abb::egm::EgmCartesian*>(
      ::abb::egm::EgmCartesian::internal_default_instance());
  orient_ = const_cast< ::abb::egm::EgmQuaternion*>(
      ::abb::egm::EgmQuaternion::internal_default_instance());
  euler_ = const_cast< ::abb::egm::EgmEuler*>(
      ::abb::egm::EgmEuler::internal_default_instance());
}

EgmPose::EgmPose(const EgmPose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmPose)
}

void EgmPose::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  orient_ = NULL;
  euler_ = NULL;
}

EgmPose::~EgmPose() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmPose)
  SharedDtor();
}

void EgmPose::SharedDtor() {
  if (this != &EgmPose_default_instance_.get()) {
    delete pos_;
    delete orient_;
    delete euler_;
  }
}

void EgmPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmPose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmPose_descriptor_;
}

const EgmPose& EgmPose::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmPose> EgmPose_default_instance_;

EgmPose* EgmPose::New(::google::protobuf::Arena* arena) const {
  EgmPose* n = new EgmPose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmPose::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmPose)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::abb::egm::EgmCartesian::Clear();
    }
    if (has_orient()) {
      if (orient_ != NULL) orient_->::abb::egm::EgmQuaternion::Clear();
    }
    if (has_euler()) {
      if (euler_ != NULL) euler_->::abb::egm::EgmEuler::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmPose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.EgmCartesian pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orient;
        break;
      }

      // optional .abb.egm.EgmQuaternion orient = 2;
      case 2: {
        if (tag == 18) {
         parse_orient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orient()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_euler;
        break;
      }

      // optional .abb.egm.EgmEuler euler = 3;
      case 3: {
        if (tag == 26) {
         parse_euler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_euler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmPose)
  return false;
#undef DO_
}

void EgmPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmPose)
  // optional .abb.egm.EgmCartesian pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // optional .abb.egm.EgmQuaternion orient = 2;
  if (has_orient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orient_, output);
  }

  // optional .abb.egm.EgmEuler euler = 3;
  if (has_euler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->euler_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmPose)
}

::google::protobuf::uint8* EgmPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmPose)
  // optional .abb.egm.EgmCartesian pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, false, target);
  }

  // optional .abb.egm.EgmQuaternion orient = 2;
  if (has_orient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orient_, false, target);
  }

  // optional .abb.egm.EgmEuler euler = 3;
  if (has_euler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->euler_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmPose)
  return target;
}

size_t EgmPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmPose)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .abb.egm.EgmCartesian pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .abb.egm.EgmQuaternion orient = 2;
    if (has_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orient_);
    }

    // optional .abb.egm.EgmEuler euler = 3;
    if (has_euler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->euler_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmPose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmPose)
    UnsafeMergeFrom(*source);
  }
}

void EgmPose::MergeFrom(const EgmPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmPose)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmPose::UnsafeMergeFrom(const EgmPose& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::abb::egm::EgmCartesian::MergeFrom(from.pos());
    }
    if (from.has_orient()) {
      mutable_orient()->::abb::egm::EgmQuaternion::MergeFrom(from.orient());
    }
    if (from.has_euler()) {
      mutable_euler()->::abb::egm::EgmEuler::MergeFrom(from.euler());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmPose::CopyFrom(const EgmPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmPose)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmPose::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_orient()) {
    if (!this->orient_->IsInitialized()) return false;
  }
  if (has_euler()) {
    if (!this->euler_->IsInitialized()) return false;
  }
  return true;
}

void EgmPose::Swap(EgmPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmPose::InternalSwap(EgmPose* other) {
  std::swap(pos_, other->pos_);
  std::swap(orient_, other->orient_);
  std::swap(euler_, other->euler_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmPose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmPose_descriptor_;
  metadata.reflection = EgmPose_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmPose

// optional .abb.egm.EgmCartesian pos = 1;
bool EgmPose::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmPose::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmPose::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmPose::clear_pos() {
  if (pos_ != NULL) pos_->::abb::egm::EgmCartesian::Clear();
  clear_has_pos();
}
const ::abb::egm::EgmCartesian& EgmPose::pos() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmPose.pos)
  return pos_ != NULL ? *pos_
                         : *::abb::egm::EgmCartesian::internal_default_instance();
}
::abb::egm::EgmCartesian* EgmPose::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::abb::egm::EgmCartesian;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmPose.pos)
  return pos_;
}
::abb::egm::EgmCartesian* EgmPose::release_pos() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmPose.pos)
  clear_has_pos();
  ::abb::egm::EgmCartesian* temp = pos_;
  pos_ = NULL;
  return temp;
}
void EgmPose::set_allocated_pos(::abb::egm::EgmCartesian* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmPose.pos)
}

// optional .abb.egm.EgmQuaternion orient = 2;
bool EgmPose::has_orient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmPose::set_has_orient() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmPose::clear_has_orient() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmPose::clear_orient() {
  if (orient_ != NULL) orient_->::abb::egm::EgmQuaternion::Clear();
  clear_has_orient();
}
const ::abb::egm::EgmQuaternion& EgmPose::orient() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmPose.orient)
  return orient_ != NULL ? *orient_
                         : *::abb::egm::EgmQuaternion::internal_default_instance();
}
::abb::egm::EgmQuaternion* EgmPose::mutable_orient() {
  set_has_orient();
  if (orient_ == NULL) {
    orient_ = new ::abb::egm::EgmQuaternion;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmPose.orient)
  return orient_;
}
::abb::egm::EgmQuaternion* EgmPose::release_orient() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmPose.orient)
  clear_has_orient();
  ::abb::egm::EgmQuaternion* temp = orient_;
  orient_ = NULL;
  return temp;
}
void EgmPose::set_allocated_orient(::abb::egm::EgmQuaternion* orient) {
  delete orient_;
  orient_ = orient;
  if (orient) {
    set_has_orient();
  } else {
    clear_has_orient();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmPose.orient)
}

// optional .abb.egm.EgmEuler euler = 3;
bool EgmPose::has_euler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgmPose::set_has_euler() {
  _has_bits_[0] |= 0x00000004u;
}
void EgmPose::clear_has_euler() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgmPose::clear_euler() {
  if (euler_ != NULL) euler_->::abb::egm::EgmEuler::Clear();
  clear_has_euler();
}
const ::abb::egm::EgmEuler& EgmPose::euler() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmPose.euler)
  return euler_ != NULL ? *euler_
                         : *::abb::egm::EgmEuler::internal_default_instance();
}
::abb::egm::EgmEuler* EgmPose::mutable_euler() {
  set_has_euler();
  if (euler_ == NULL) {
    euler_ = new ::abb::egm::EgmEuler;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmPose.euler)
  return euler_;
}
::abb::egm::EgmEuler* EgmPose::release_euler() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmPose.euler)
  clear_has_euler();
  ::abb::egm::EgmEuler* temp = euler_;
  euler_ = NULL;
  return temp;
}
void EgmPose::set_allocated_euler(::abb::egm::EgmEuler* euler) {
  delete euler_;
  euler_ = euler;
  if (euler) {
    set_has_euler();
  } else {
    clear_has_euler();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmPose.euler)
}

inline const EgmPose* EgmPose::internal_default_instance() {
  return &EgmPose_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmCartesianSpeed::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmCartesianSpeed::EgmCartesianSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmCartesianSpeed)
}

void EgmCartesianSpeed::InitAsDefaultInstance() {
}

EgmCartesianSpeed::EgmCartesianSpeed(const EgmCartesianSpeed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmCartesianSpeed)
}

void EgmCartesianSpeed::SharedCtor() {
  _cached_size_ = 0;
}

EgmCartesianSpeed::~EgmCartesianSpeed() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmCartesianSpeed)
  SharedDtor();
}

void EgmCartesianSpeed::SharedDtor() {
}

void EgmCartesianSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmCartesianSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmCartesianSpeed_descriptor_;
}

const EgmCartesianSpeed& EgmCartesianSpeed::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmCartesianSpeed> EgmCartesianSpeed_default_instance_;

EgmCartesianSpeed* EgmCartesianSpeed::New(::google::protobuf::Arena* arena) const {
  EgmCartesianSpeed* n = new EgmCartesianSpeed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmCartesianSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmCartesianSpeed)
  value_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmCartesianSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmCartesianSpeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 1;
      case 1: {
        if (tag == 9) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_value())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmCartesianSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmCartesianSpeed)
  return false;
#undef DO_
}

void EgmCartesianSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmCartesianSpeed)
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmCartesianSpeed)
}

::google::protobuf::uint8* EgmCartesianSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmCartesianSpeed)
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmCartesianSpeed)
  return target;
}

size_t EgmCartesianSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmCartesianSpeed)
  size_t total_size = 0;

  // repeated double value = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->value_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->value_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmCartesianSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmCartesianSpeed)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmCartesianSpeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmCartesianSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmCartesianSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmCartesianSpeed)
    UnsafeMergeFrom(*source);
  }
}

void EgmCartesianSpeed::MergeFrom(const EgmCartesianSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmCartesianSpeed)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmCartesianSpeed::UnsafeMergeFrom(const EgmCartesianSpeed& from) {
  GOOGLE_DCHECK(&from != this);
  value_.UnsafeMergeFrom(from.value_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmCartesianSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmCartesianSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmCartesianSpeed::CopyFrom(const EgmCartesianSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmCartesianSpeed)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmCartesianSpeed::IsInitialized() const {

  return true;
}

void EgmCartesianSpeed::Swap(EgmCartesianSpeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmCartesianSpeed::InternalSwap(EgmCartesianSpeed* other) {
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmCartesianSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmCartesianSpeed_descriptor_;
  metadata.reflection = EgmCartesianSpeed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmCartesianSpeed

// repeated double value = 1;
int EgmCartesianSpeed::value_size() const {
  return value_.size();
}
void EgmCartesianSpeed::clear_value() {
  value_.Clear();
}
double EgmCartesianSpeed::value(int index) const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmCartesianSpeed.value)
  return value_.Get(index);
}
void EgmCartesianSpeed::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:abb.egm.EgmCartesianSpeed.value)
}
void EgmCartesianSpeed::add_value(double value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:abb.egm.EgmCartesianSpeed.value)
}
const ::google::protobuf::RepeatedField< double >&
EgmCartesianSpeed::value() const {
  // @@protoc_insertion_point(field_list:abb.egm.EgmCartesianSpeed.value)
  return value_;
}
::google::protobuf::RepeatedField< double >*
EgmCartesianSpeed::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:abb.egm.EgmCartesianSpeed.value)
  return &value_;
}

inline const EgmCartesianSpeed* EgmCartesianSpeed::internal_default_instance() {
  return &EgmCartesianSpeed_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmJoints::kJointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmJoints::EgmJoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmJoints)
}

void EgmJoints::InitAsDefaultInstance() {
}

EgmJoints::EgmJoints(const EgmJoints& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmJoints)
}

void EgmJoints::SharedCtor() {
  _cached_size_ = 0;
}

EgmJoints::~EgmJoints() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmJoints)
  SharedDtor();
}

void EgmJoints::SharedDtor() {
}

void EgmJoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmJoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmJoints_descriptor_;
}

const EgmJoints& EgmJoints::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmJoints> EgmJoints_default_instance_;

EgmJoints* EgmJoints::New(::google::protobuf::Arena* arena) const {
  EgmJoints* n = new EgmJoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmJoints::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmJoints)
  joints_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmJoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmJoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double joints = 1;
      case 1: {
        if (tag == 9) {
         parse_joints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_joints())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_joints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_joints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmJoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmJoints)
  return false;
#undef DO_
}

void EgmJoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmJoints)
  // repeated double joints = 1;
  for (int i = 0; i < this->joints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->joints(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmJoints)
}

::google::protobuf::uint8* EgmJoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmJoints)
  // repeated double joints = 1;
  for (int i = 0; i < this->joints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->joints(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmJoints)
  return target;
}

size_t EgmJoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmJoints)
  size_t total_size = 0;

  // repeated double joints = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->joints_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->joints_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmJoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmJoints)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmJoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmJoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmJoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmJoints)
    UnsafeMergeFrom(*source);
  }
}

void EgmJoints::MergeFrom(const EgmJoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmJoints)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmJoints::UnsafeMergeFrom(const EgmJoints& from) {
  GOOGLE_DCHECK(&from != this);
  joints_.UnsafeMergeFrom(from.joints_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmJoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmJoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmJoints::CopyFrom(const EgmJoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmJoints)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmJoints::IsInitialized() const {

  return true;
}

void EgmJoints::Swap(EgmJoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmJoints::InternalSwap(EgmJoints* other) {
  joints_.UnsafeArenaSwap(&other->joints_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmJoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmJoints_descriptor_;
  metadata.reflection = EgmJoints_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmJoints

// repeated double joints = 1;
int EgmJoints::joints_size() const {
  return joints_.size();
}
void EgmJoints::clear_joints() {
  joints_.Clear();
}
double EgmJoints::joints(int index) const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmJoints.joints)
  return joints_.Get(index);
}
void EgmJoints::set_joints(int index, double value) {
  joints_.Set(index, value);
  // @@protoc_insertion_point(field_set:abb.egm.EgmJoints.joints)
}
void EgmJoints::add_joints(double value) {
  joints_.Add(value);
  // @@protoc_insertion_point(field_add:abb.egm.EgmJoints.joints)
}
const ::google::protobuf::RepeatedField< double >&
EgmJoints::joints() const {
  // @@protoc_insertion_point(field_list:abb.egm.EgmJoints.joints)
  return joints_;
}
::google::protobuf::RepeatedField< double >*
EgmJoints::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:abb.egm.EgmJoints.joints)
  return &joints_;
}

inline const EgmJoints* EgmJoints::internal_default_instance() {
  return &EgmJoints_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmExternalJoints::kJointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmExternalJoints::EgmExternalJoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmExternalJoints)
}

void EgmExternalJoints::InitAsDefaultInstance() {
}

EgmExternalJoints::EgmExternalJoints(const EgmExternalJoints& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmExternalJoints)
}

void EgmExternalJoints::SharedCtor() {
  _cached_size_ = 0;
}

EgmExternalJoints::~EgmExternalJoints() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmExternalJoints)
  SharedDtor();
}

void EgmExternalJoints::SharedDtor() {
}

void EgmExternalJoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmExternalJoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmExternalJoints_descriptor_;
}

const EgmExternalJoints& EgmExternalJoints::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmExternalJoints> EgmExternalJoints_default_instance_;

EgmExternalJoints* EgmExternalJoints::New(::google::protobuf::Arena* arena) const {
  EgmExternalJoints* n = new EgmExternalJoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmExternalJoints::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmExternalJoints)
  joints_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmExternalJoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmExternalJoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double joints = 1;
      case 1: {
        if (tag == 9) {
         parse_joints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_joints())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_joints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_joints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmExternalJoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmExternalJoints)
  return false;
#undef DO_
}

void EgmExternalJoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmExternalJoints)
  // repeated double joints = 1;
  for (int i = 0; i < this->joints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->joints(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmExternalJoints)
}

::google::protobuf::uint8* EgmExternalJoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmExternalJoints)
  // repeated double joints = 1;
  for (int i = 0; i < this->joints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->joints(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmExternalJoints)
  return target;
}

size_t EgmExternalJoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmExternalJoints)
  size_t total_size = 0;

  // repeated double joints = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->joints_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->joints_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmExternalJoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmExternalJoints)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmExternalJoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmExternalJoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmExternalJoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmExternalJoints)
    UnsafeMergeFrom(*source);
  }
}

void EgmExternalJoints::MergeFrom(const EgmExternalJoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmExternalJoints)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmExternalJoints::UnsafeMergeFrom(const EgmExternalJoints& from) {
  GOOGLE_DCHECK(&from != this);
  joints_.UnsafeMergeFrom(from.joints_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmExternalJoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmExternalJoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmExternalJoints::CopyFrom(const EgmExternalJoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmExternalJoints)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmExternalJoints::IsInitialized() const {

  return true;
}

void EgmExternalJoints::Swap(EgmExternalJoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmExternalJoints::InternalSwap(EgmExternalJoints* other) {
  joints_.UnsafeArenaSwap(&other->joints_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmExternalJoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmExternalJoints_descriptor_;
  metadata.reflection = EgmExternalJoints_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmExternalJoints

// repeated double joints = 1;
int EgmExternalJoints::joints_size() const {
  return joints_.size();
}
void EgmExternalJoints::clear_joints() {
  joints_.Clear();
}
double EgmExternalJoints::joints(int index) const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmExternalJoints.joints)
  return joints_.Get(index);
}
void EgmExternalJoints::set_joints(int index, double value) {
  joints_.Set(index, value);
  // @@protoc_insertion_point(field_set:abb.egm.EgmExternalJoints.joints)
}
void EgmExternalJoints::add_joints(double value) {
  joints_.Add(value);
  // @@protoc_insertion_point(field_add:abb.egm.EgmExternalJoints.joints)
}
const ::google::protobuf::RepeatedField< double >&
EgmExternalJoints::joints() const {
  // @@protoc_insertion_point(field_list:abb.egm.EgmExternalJoints.joints)
  return joints_;
}
::google::protobuf::RepeatedField< double >*
EgmExternalJoints::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:abb.egm.EgmExternalJoints.joints)
  return &joints_;
}

inline const EgmExternalJoints* EgmExternalJoints::internal_default_instance() {
  return &EgmExternalJoints_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmPlanned::kJointsFieldNumber;
const int EgmPlanned::kCartesianFieldNumber;
const int EgmPlanned::kExternalJointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmPlanned::EgmPlanned()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmPlanned)
}

void EgmPlanned::InitAsDefaultInstance() {
  joints_ = const_cast< ::abb::egm::EgmJoints*>(
      ::abb::egm::EgmJoints::internal_default_instance());
  cartesian_ = const_cast< ::abb::egm::EgmPose*>(
      ::abb::egm::EgmPose::internal_default_instance());
  externaljoints_ = const_cast< ::abb::egm::EgmJoints*>(
      ::abb::egm::EgmJoints::internal_default_instance());
}

EgmPlanned::EgmPlanned(const EgmPlanned& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmPlanned)
}

void EgmPlanned::SharedCtor() {
  _cached_size_ = 0;
  joints_ = NULL;
  cartesian_ = NULL;
  externaljoints_ = NULL;
}

EgmPlanned::~EgmPlanned() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmPlanned)
  SharedDtor();
}

void EgmPlanned::SharedDtor() {
  if (this != &EgmPlanned_default_instance_.get()) {
    delete joints_;
    delete cartesian_;
    delete externaljoints_;
  }
}

void EgmPlanned::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmPlanned::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmPlanned_descriptor_;
}

const EgmPlanned& EgmPlanned::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmPlanned> EgmPlanned_default_instance_;

EgmPlanned* EgmPlanned::New(::google::protobuf::Arena* arena) const {
  EgmPlanned* n = new EgmPlanned;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmPlanned::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmPlanned)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_joints()) {
      if (joints_ != NULL) joints_->::abb::egm::EgmJoints::Clear();
    }
    if (has_cartesian()) {
      if (cartesian_ != NULL) cartesian_->::abb::egm::EgmPose::Clear();
    }
    if (has_externaljoints()) {
      if (externaljoints_ != NULL) externaljoints_->::abb::egm::EgmJoints::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmPlanned::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmPlanned)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.EgmJoints joints = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cartesian;
        break;
      }

      // optional .abb.egm.EgmPose cartesian = 2;
      case 2: {
        if (tag == 18) {
         parse_cartesian:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cartesian()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_externalJoints;
        break;
      }

      // optional .abb.egm.EgmJoints externalJoints = 3;
      case 3: {
        if (tag == 26) {
         parse_externalJoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_externaljoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmPlanned)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmPlanned)
  return false;
#undef DO_
}

void EgmPlanned::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmPlanned)
  // optional .abb.egm.EgmJoints joints = 1;
  if (has_joints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->joints_, output);
  }

  // optional .abb.egm.EgmPose cartesian = 2;
  if (has_cartesian()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cartesian_, output);
  }

  // optional .abb.egm.EgmJoints externalJoints = 3;
  if (has_externaljoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->externaljoints_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmPlanned)
}

::google::protobuf::uint8* EgmPlanned::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmPlanned)
  // optional .abb.egm.EgmJoints joints = 1;
  if (has_joints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->joints_, false, target);
  }

  // optional .abb.egm.EgmPose cartesian = 2;
  if (has_cartesian()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cartesian_, false, target);
  }

  // optional .abb.egm.EgmJoints externalJoints = 3;
  if (has_externaljoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->externaljoints_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmPlanned)
  return target;
}

size_t EgmPlanned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmPlanned)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .abb.egm.EgmJoints joints = 1;
    if (has_joints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->joints_);
    }

    // optional .abb.egm.EgmPose cartesian = 2;
    if (has_cartesian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cartesian_);
    }

    // optional .abb.egm.EgmJoints externalJoints = 3;
    if (has_externaljoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->externaljoints_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmPlanned::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmPlanned)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmPlanned* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmPlanned>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmPlanned)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmPlanned)
    UnsafeMergeFrom(*source);
  }
}

void EgmPlanned::MergeFrom(const EgmPlanned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmPlanned)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmPlanned::UnsafeMergeFrom(const EgmPlanned& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_joints()) {
      mutable_joints()->::abb::egm::EgmJoints::MergeFrom(from.joints());
    }
    if (from.has_cartesian()) {
      mutable_cartesian()->::abb::egm::EgmPose::MergeFrom(from.cartesian());
    }
    if (from.has_externaljoints()) {
      mutable_externaljoints()->::abb::egm::EgmJoints::MergeFrom(from.externaljoints());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmPlanned::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmPlanned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmPlanned::CopyFrom(const EgmPlanned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmPlanned)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmPlanned::IsInitialized() const {

  if (has_cartesian()) {
    if (!this->cartesian_->IsInitialized()) return false;
  }
  return true;
}

void EgmPlanned::Swap(EgmPlanned* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmPlanned::InternalSwap(EgmPlanned* other) {
  std::swap(joints_, other->joints_);
  std::swap(cartesian_, other->cartesian_);
  std::swap(externaljoints_, other->externaljoints_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmPlanned::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmPlanned_descriptor_;
  metadata.reflection = EgmPlanned_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmPlanned

// optional .abb.egm.EgmJoints joints = 1;
bool EgmPlanned::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmPlanned::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmPlanned::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmPlanned::clear_joints() {
  if (joints_ != NULL) joints_->::abb::egm::EgmJoints::Clear();
  clear_has_joints();
}
const ::abb::egm::EgmJoints& EgmPlanned::joints() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmPlanned.joints)
  return joints_ != NULL ? *joints_
                         : *::abb::egm::EgmJoints::internal_default_instance();
}
::abb::egm::EgmJoints* EgmPlanned::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) {
    joints_ = new ::abb::egm::EgmJoints;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmPlanned.joints)
  return joints_;
}
::abb::egm::EgmJoints* EgmPlanned::release_joints() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmPlanned.joints)
  clear_has_joints();
  ::abb::egm::EgmJoints* temp = joints_;
  joints_ = NULL;
  return temp;
}
void EgmPlanned::set_allocated_joints(::abb::egm::EgmJoints* joints) {
  delete joints_;
  joints_ = joints;
  if (joints) {
    set_has_joints();
  } else {
    clear_has_joints();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmPlanned.joints)
}

// optional .abb.egm.EgmPose cartesian = 2;
bool EgmPlanned::has_cartesian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmPlanned::set_has_cartesian() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmPlanned::clear_has_cartesian() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmPlanned::clear_cartesian() {
  if (cartesian_ != NULL) cartesian_->::abb::egm::EgmPose::Clear();
  clear_has_cartesian();
}
const ::abb::egm::EgmPose& EgmPlanned::cartesian() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmPlanned.cartesian)
  return cartesian_ != NULL ? *cartesian_
                         : *::abb::egm::EgmPose::internal_default_instance();
}
::abb::egm::EgmPose* EgmPlanned::mutable_cartesian() {
  set_has_cartesian();
  if (cartesian_ == NULL) {
    cartesian_ = new ::abb::egm::EgmPose;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmPlanned.cartesian)
  return cartesian_;
}
::abb::egm::EgmPose* EgmPlanned::release_cartesian() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmPlanned.cartesian)
  clear_has_cartesian();
  ::abb::egm::EgmPose* temp = cartesian_;
  cartesian_ = NULL;
  return temp;
}
void EgmPlanned::set_allocated_cartesian(::abb::egm::EgmPose* cartesian) {
  delete cartesian_;
  cartesian_ = cartesian;
  if (cartesian) {
    set_has_cartesian();
  } else {
    clear_has_cartesian();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmPlanned.cartesian)
}

// optional .abb.egm.EgmJoints externalJoints = 3;
bool EgmPlanned::has_externaljoints() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgmPlanned::set_has_externaljoints() {
  _has_bits_[0] |= 0x00000004u;
}
void EgmPlanned::clear_has_externaljoints() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgmPlanned::clear_externaljoints() {
  if (externaljoints_ != NULL) externaljoints_->::abb::egm::EgmJoints::Clear();
  clear_has_externaljoints();
}
const ::abb::egm::EgmJoints& EgmPlanned::externaljoints() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmPlanned.externalJoints)
  return externaljoints_ != NULL ? *externaljoints_
                         : *::abb::egm::EgmJoints::internal_default_instance();
}
::abb::egm::EgmJoints* EgmPlanned::mutable_externaljoints() {
  set_has_externaljoints();
  if (externaljoints_ == NULL) {
    externaljoints_ = new ::abb::egm::EgmJoints;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmPlanned.externalJoints)
  return externaljoints_;
}
::abb::egm::EgmJoints* EgmPlanned::release_externaljoints() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmPlanned.externalJoints)
  clear_has_externaljoints();
  ::abb::egm::EgmJoints* temp = externaljoints_;
  externaljoints_ = NULL;
  return temp;
}
void EgmPlanned::set_allocated_externaljoints(::abb::egm::EgmJoints* externaljoints) {
  delete externaljoints_;
  externaljoints_ = externaljoints;
  if (externaljoints) {
    set_has_externaljoints();
  } else {
    clear_has_externaljoints();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmPlanned.externalJoints)
}

inline const EgmPlanned* EgmPlanned::internal_default_instance() {
  return &EgmPlanned_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmSpeedRef::kJointsFieldNumber;
const int EgmSpeedRef::kCartesiansFieldNumber;
const int EgmSpeedRef::kExternalJointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmSpeedRef::EgmSpeedRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmSpeedRef)
}

void EgmSpeedRef::InitAsDefaultInstance() {
  joints_ = const_cast< ::abb::egm::EgmJoints*>(
      ::abb::egm::EgmJoints::internal_default_instance());
  cartesians_ = const_cast< ::abb::egm::EgmCartesianSpeed*>(
      ::abb::egm::EgmCartesianSpeed::internal_default_instance());
  externaljoints_ = const_cast< ::abb::egm::EgmJoints*>(
      ::abb::egm::EgmJoints::internal_default_instance());
}

EgmSpeedRef::EgmSpeedRef(const EgmSpeedRef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmSpeedRef)
}

void EgmSpeedRef::SharedCtor() {
  _cached_size_ = 0;
  joints_ = NULL;
  cartesians_ = NULL;
  externaljoints_ = NULL;
}

EgmSpeedRef::~EgmSpeedRef() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmSpeedRef)
  SharedDtor();
}

void EgmSpeedRef::SharedDtor() {
  if (this != &EgmSpeedRef_default_instance_.get()) {
    delete joints_;
    delete cartesians_;
    delete externaljoints_;
  }
}

void EgmSpeedRef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmSpeedRef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmSpeedRef_descriptor_;
}

const EgmSpeedRef& EgmSpeedRef::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmSpeedRef> EgmSpeedRef_default_instance_;

EgmSpeedRef* EgmSpeedRef::New(::google::protobuf::Arena* arena) const {
  EgmSpeedRef* n = new EgmSpeedRef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmSpeedRef::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmSpeedRef)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_joints()) {
      if (joints_ != NULL) joints_->::abb::egm::EgmJoints::Clear();
    }
    if (has_cartesians()) {
      if (cartesians_ != NULL) cartesians_->::abb::egm::EgmCartesianSpeed::Clear();
    }
    if (has_externaljoints()) {
      if (externaljoints_ != NULL) externaljoints_->::abb::egm::EgmJoints::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmSpeedRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmSpeedRef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.EgmJoints joints = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cartesians;
        break;
      }

      // optional .abb.egm.EgmCartesianSpeed cartesians = 2;
      case 2: {
        if (tag == 18) {
         parse_cartesians:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cartesians()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_externalJoints;
        break;
      }

      // optional .abb.egm.EgmJoints externalJoints = 3;
      case 3: {
        if (tag == 26) {
         parse_externalJoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_externaljoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmSpeedRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmSpeedRef)
  return false;
#undef DO_
}

void EgmSpeedRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmSpeedRef)
  // optional .abb.egm.EgmJoints joints = 1;
  if (has_joints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->joints_, output);
  }

  // optional .abb.egm.EgmCartesianSpeed cartesians = 2;
  if (has_cartesians()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cartesians_, output);
  }

  // optional .abb.egm.EgmJoints externalJoints = 3;
  if (has_externaljoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->externaljoints_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmSpeedRef)
}

::google::protobuf::uint8* EgmSpeedRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmSpeedRef)
  // optional .abb.egm.EgmJoints joints = 1;
  if (has_joints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->joints_, false, target);
  }

  // optional .abb.egm.EgmCartesianSpeed cartesians = 2;
  if (has_cartesians()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cartesians_, false, target);
  }

  // optional .abb.egm.EgmJoints externalJoints = 3;
  if (has_externaljoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->externaljoints_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmSpeedRef)
  return target;
}

size_t EgmSpeedRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmSpeedRef)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .abb.egm.EgmJoints joints = 1;
    if (has_joints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->joints_);
    }

    // optional .abb.egm.EgmCartesianSpeed cartesians = 2;
    if (has_cartesians()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cartesians_);
    }

    // optional .abb.egm.EgmJoints externalJoints = 3;
    if (has_externaljoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->externaljoints_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmSpeedRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmSpeedRef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmSpeedRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmSpeedRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmSpeedRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmSpeedRef)
    UnsafeMergeFrom(*source);
  }
}

void EgmSpeedRef::MergeFrom(const EgmSpeedRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmSpeedRef)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmSpeedRef::UnsafeMergeFrom(const EgmSpeedRef& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_joints()) {
      mutable_joints()->::abb::egm::EgmJoints::MergeFrom(from.joints());
    }
    if (from.has_cartesians()) {
      mutable_cartesians()->::abb::egm::EgmCartesianSpeed::MergeFrom(from.cartesians());
    }
    if (from.has_externaljoints()) {
      mutable_externaljoints()->::abb::egm::EgmJoints::MergeFrom(from.externaljoints());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmSpeedRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmSpeedRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmSpeedRef::CopyFrom(const EgmSpeedRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmSpeedRef)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmSpeedRef::IsInitialized() const {

  return true;
}

void EgmSpeedRef::Swap(EgmSpeedRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmSpeedRef::InternalSwap(EgmSpeedRef* other) {
  std::swap(joints_, other->joints_);
  std::swap(cartesians_, other->cartesians_);
  std::swap(externaljoints_, other->externaljoints_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmSpeedRef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmSpeedRef_descriptor_;
  metadata.reflection = EgmSpeedRef_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmSpeedRef

// optional .abb.egm.EgmJoints joints = 1;
bool EgmSpeedRef::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmSpeedRef::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmSpeedRef::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmSpeedRef::clear_joints() {
  if (joints_ != NULL) joints_->::abb::egm::EgmJoints::Clear();
  clear_has_joints();
}
const ::abb::egm::EgmJoints& EgmSpeedRef::joints() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmSpeedRef.joints)
  return joints_ != NULL ? *joints_
                         : *::abb::egm::EgmJoints::internal_default_instance();
}
::abb::egm::EgmJoints* EgmSpeedRef::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) {
    joints_ = new ::abb::egm::EgmJoints;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmSpeedRef.joints)
  return joints_;
}
::abb::egm::EgmJoints* EgmSpeedRef::release_joints() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmSpeedRef.joints)
  clear_has_joints();
  ::abb::egm::EgmJoints* temp = joints_;
  joints_ = NULL;
  return temp;
}
void EgmSpeedRef::set_allocated_joints(::abb::egm::EgmJoints* joints) {
  delete joints_;
  joints_ = joints;
  if (joints) {
    set_has_joints();
  } else {
    clear_has_joints();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmSpeedRef.joints)
}

// optional .abb.egm.EgmCartesianSpeed cartesians = 2;
bool EgmSpeedRef::has_cartesians() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmSpeedRef::set_has_cartesians() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmSpeedRef::clear_has_cartesians() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmSpeedRef::clear_cartesians() {
  if (cartesians_ != NULL) cartesians_->::abb::egm::EgmCartesianSpeed::Clear();
  clear_has_cartesians();
}
const ::abb::egm::EgmCartesianSpeed& EgmSpeedRef::cartesians() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmSpeedRef.cartesians)
  return cartesians_ != NULL ? *cartesians_
                         : *::abb::egm::EgmCartesianSpeed::internal_default_instance();
}
::abb::egm::EgmCartesianSpeed* EgmSpeedRef::mutable_cartesians() {
  set_has_cartesians();
  if (cartesians_ == NULL) {
    cartesians_ = new ::abb::egm::EgmCartesianSpeed;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmSpeedRef.cartesians)
  return cartesians_;
}
::abb::egm::EgmCartesianSpeed* EgmSpeedRef::release_cartesians() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmSpeedRef.cartesians)
  clear_has_cartesians();
  ::abb::egm::EgmCartesianSpeed* temp = cartesians_;
  cartesians_ = NULL;
  return temp;
}
void EgmSpeedRef::set_allocated_cartesians(::abb::egm::EgmCartesianSpeed* cartesians) {
  delete cartesians_;
  cartesians_ = cartesians;
  if (cartesians) {
    set_has_cartesians();
  } else {
    clear_has_cartesians();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmSpeedRef.cartesians)
}

// optional .abb.egm.EgmJoints externalJoints = 3;
bool EgmSpeedRef::has_externaljoints() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgmSpeedRef::set_has_externaljoints() {
  _has_bits_[0] |= 0x00000004u;
}
void EgmSpeedRef::clear_has_externaljoints() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgmSpeedRef::clear_externaljoints() {
  if (externaljoints_ != NULL) externaljoints_->::abb::egm::EgmJoints::Clear();
  clear_has_externaljoints();
}
const ::abb::egm::EgmJoints& EgmSpeedRef::externaljoints() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmSpeedRef.externalJoints)
  return externaljoints_ != NULL ? *externaljoints_
                         : *::abb::egm::EgmJoints::internal_default_instance();
}
::abb::egm::EgmJoints* EgmSpeedRef::mutable_externaljoints() {
  set_has_externaljoints();
  if (externaljoints_ == NULL) {
    externaljoints_ = new ::abb::egm::EgmJoints;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmSpeedRef.externalJoints)
  return externaljoints_;
}
::abb::egm::EgmJoints* EgmSpeedRef::release_externaljoints() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmSpeedRef.externalJoints)
  clear_has_externaljoints();
  ::abb::egm::EgmJoints* temp = externaljoints_;
  externaljoints_ = NULL;
  return temp;
}
void EgmSpeedRef::set_allocated_externaljoints(::abb::egm::EgmJoints* externaljoints) {
  delete externaljoints_;
  externaljoints_ = externaljoints;
  if (externaljoints) {
    set_has_externaljoints();
  } else {
    clear_has_externaljoints();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmSpeedRef.externalJoints)
}

inline const EgmSpeedRef* EgmSpeedRef::internal_default_instance() {
  return &EgmSpeedRef_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmPathCorr::kPosFieldNumber;
const int EgmPathCorr::kAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmPathCorr::EgmPathCorr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmPathCorr)
}

void EgmPathCorr::InitAsDefaultInstance() {
  pos_ = const_cast< ::abb::egm::EgmCartesian*>(
      ::abb::egm::EgmCartesian::internal_default_instance());
}

EgmPathCorr::EgmPathCorr(const EgmPathCorr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmPathCorr)
}

void EgmPathCorr::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  age_ = 0u;
}

EgmPathCorr::~EgmPathCorr() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmPathCorr)
  SharedDtor();
}

void EgmPathCorr::SharedDtor() {
  if (this != &EgmPathCorr_default_instance_.get()) {
    delete pos_;
  }
}

void EgmPathCorr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmPathCorr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmPathCorr_descriptor_;
}

const EgmPathCorr& EgmPathCorr::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmPathCorr> EgmPathCorr_default_instance_;

EgmPathCorr* EgmPathCorr::New(::google::protobuf::Arena* arena) const {
  EgmPathCorr* n = new EgmPathCorr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmPathCorr::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmPathCorr)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::abb::egm::EgmCartesian::Clear();
    }
    age_ = 0u;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmPathCorr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmPathCorr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .abb.egm.EgmCartesian pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_age;
        break;
      }

      // required uint32 age = 2;
      case 2: {
        if (tag == 16) {
         parse_age:
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmPathCorr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmPathCorr)
  return false;
#undef DO_
}

void EgmPathCorr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmPathCorr)
  // required .abb.egm.EgmCartesian pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // required uint32 age = 2;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->age(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmPathCorr)
}

::google::protobuf::uint8* EgmPathCorr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmPathCorr)
  // required .abb.egm.EgmCartesian pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, false, target);
  }

  // required uint32 age = 2;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->age(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmPathCorr)
  return target;
}

size_t EgmPathCorr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:abb.egm.EgmPathCorr)
  size_t total_size = 0;

  if (has_pos()) {
    // required .abb.egm.EgmCartesian pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_age()) {
    // required uint32 age = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->age());
  }

  return total_size;
}
size_t EgmPathCorr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmPathCorr)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .abb.egm.EgmCartesian pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required uint32 age = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->age());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmPathCorr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmPathCorr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmPathCorr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmPathCorr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmPathCorr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmPathCorr)
    UnsafeMergeFrom(*source);
  }
}

void EgmPathCorr::MergeFrom(const EgmPathCorr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmPathCorr)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmPathCorr::UnsafeMergeFrom(const EgmPathCorr& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::abb::egm::EgmCartesian::MergeFrom(from.pos());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmPathCorr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmPathCorr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmPathCorr::CopyFrom(const EgmPathCorr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmPathCorr)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmPathCorr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void EgmPathCorr::Swap(EgmPathCorr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmPathCorr::InternalSwap(EgmPathCorr* other) {
  std::swap(pos_, other->pos_);
  std::swap(age_, other->age_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmPathCorr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmPathCorr_descriptor_;
  metadata.reflection = EgmPathCorr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmPathCorr

// required .abb.egm.EgmCartesian pos = 1;
bool EgmPathCorr::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmPathCorr::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmPathCorr::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmPathCorr::clear_pos() {
  if (pos_ != NULL) pos_->::abb::egm::EgmCartesian::Clear();
  clear_has_pos();
}
const ::abb::egm::EgmCartesian& EgmPathCorr::pos() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmPathCorr.pos)
  return pos_ != NULL ? *pos_
                         : *::abb::egm::EgmCartesian::internal_default_instance();
}
::abb::egm::EgmCartesian* EgmPathCorr::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::abb::egm::EgmCartesian;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmPathCorr.pos)
  return pos_;
}
::abb::egm::EgmCartesian* EgmPathCorr::release_pos() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmPathCorr.pos)
  clear_has_pos();
  ::abb::egm::EgmCartesian* temp = pos_;
  pos_ = NULL;
  return temp;
}
void EgmPathCorr::set_allocated_pos(::abb::egm::EgmCartesian* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmPathCorr.pos)
}

// required uint32 age = 2;
bool EgmPathCorr::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmPathCorr::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmPathCorr::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmPathCorr::clear_age() {
  age_ = 0u;
  clear_has_age();
}
::google::protobuf::uint32 EgmPathCorr::age() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmPathCorr.age)
  return age_;
}
void EgmPathCorr::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmPathCorr.age)
}

inline const EgmPathCorr* EgmPathCorr::internal_default_instance() {
  return &EgmPathCorr_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmFeedBack::kJointsFieldNumber;
const int EgmFeedBack::kCartesianFieldNumber;
const int EgmFeedBack::kExternalJointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmFeedBack::EgmFeedBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmFeedBack)
}

void EgmFeedBack::InitAsDefaultInstance() {
  joints_ = const_cast< ::abb::egm::EgmJoints*>(
      ::abb::egm::EgmJoints::internal_default_instance());
  cartesian_ = const_cast< ::abb::egm::EgmPose*>(
      ::abb::egm::EgmPose::internal_default_instance());
  externaljoints_ = const_cast< ::abb::egm::EgmJoints*>(
      ::abb::egm::EgmJoints::internal_default_instance());
}

EgmFeedBack::EgmFeedBack(const EgmFeedBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmFeedBack)
}

void EgmFeedBack::SharedCtor() {
  _cached_size_ = 0;
  joints_ = NULL;
  cartesian_ = NULL;
  externaljoints_ = NULL;
}

EgmFeedBack::~EgmFeedBack() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmFeedBack)
  SharedDtor();
}

void EgmFeedBack::SharedDtor() {
  if (this != &EgmFeedBack_default_instance_.get()) {
    delete joints_;
    delete cartesian_;
    delete externaljoints_;
  }
}

void EgmFeedBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmFeedBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmFeedBack_descriptor_;
}

const EgmFeedBack& EgmFeedBack::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmFeedBack> EgmFeedBack_default_instance_;

EgmFeedBack* EgmFeedBack::New(::google::protobuf::Arena* arena) const {
  EgmFeedBack* n = new EgmFeedBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmFeedBack::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmFeedBack)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_joints()) {
      if (joints_ != NULL) joints_->::abb::egm::EgmJoints::Clear();
    }
    if (has_cartesian()) {
      if (cartesian_ != NULL) cartesian_->::abb::egm::EgmPose::Clear();
    }
    if (has_externaljoints()) {
      if (externaljoints_ != NULL) externaljoints_->::abb::egm::EgmJoints::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmFeedBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmFeedBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.EgmJoints joints = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cartesian;
        break;
      }

      // optional .abb.egm.EgmPose cartesian = 2;
      case 2: {
        if (tag == 18) {
         parse_cartesian:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cartesian()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_externalJoints;
        break;
      }

      // optional .abb.egm.EgmJoints externalJoints = 3;
      case 3: {
        if (tag == 26) {
         parse_externalJoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_externaljoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmFeedBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmFeedBack)
  return false;
#undef DO_
}

void EgmFeedBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmFeedBack)
  // optional .abb.egm.EgmJoints joints = 1;
  if (has_joints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->joints_, output);
  }

  // optional .abb.egm.EgmPose cartesian = 2;
  if (has_cartesian()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cartesian_, output);
  }

  // optional .abb.egm.EgmJoints externalJoints = 3;
  if (has_externaljoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->externaljoints_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmFeedBack)
}

::google::protobuf::uint8* EgmFeedBack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmFeedBack)
  // optional .abb.egm.EgmJoints joints = 1;
  if (has_joints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->joints_, false, target);
  }

  // optional .abb.egm.EgmPose cartesian = 2;
  if (has_cartesian()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cartesian_, false, target);
  }

  // optional .abb.egm.EgmJoints externalJoints = 3;
  if (has_externaljoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->externaljoints_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmFeedBack)
  return target;
}

size_t EgmFeedBack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmFeedBack)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .abb.egm.EgmJoints joints = 1;
    if (has_joints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->joints_);
    }

    // optional .abb.egm.EgmPose cartesian = 2;
    if (has_cartesian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cartesian_);
    }

    // optional .abb.egm.EgmJoints externalJoints = 3;
    if (has_externaljoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->externaljoints_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmFeedBack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmFeedBack)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmFeedBack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmFeedBack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmFeedBack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmFeedBack)
    UnsafeMergeFrom(*source);
  }
}

void EgmFeedBack::MergeFrom(const EgmFeedBack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmFeedBack)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmFeedBack::UnsafeMergeFrom(const EgmFeedBack& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_joints()) {
      mutable_joints()->::abb::egm::EgmJoints::MergeFrom(from.joints());
    }
    if (from.has_cartesian()) {
      mutable_cartesian()->::abb::egm::EgmPose::MergeFrom(from.cartesian());
    }
    if (from.has_externaljoints()) {
      mutable_externaljoints()->::abb::egm::EgmJoints::MergeFrom(from.externaljoints());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmFeedBack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmFeedBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmFeedBack::CopyFrom(const EgmFeedBack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmFeedBack)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmFeedBack::IsInitialized() const {

  if (has_cartesian()) {
    if (!this->cartesian_->IsInitialized()) return false;
  }
  return true;
}

void EgmFeedBack::Swap(EgmFeedBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmFeedBack::InternalSwap(EgmFeedBack* other) {
  std::swap(joints_, other->joints_);
  std::swap(cartesian_, other->cartesian_);
  std::swap(externaljoints_, other->externaljoints_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmFeedBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmFeedBack_descriptor_;
  metadata.reflection = EgmFeedBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmFeedBack

// optional .abb.egm.EgmJoints joints = 1;
bool EgmFeedBack::has_joints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmFeedBack::set_has_joints() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmFeedBack::clear_has_joints() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmFeedBack::clear_joints() {
  if (joints_ != NULL) joints_->::abb::egm::EgmJoints::Clear();
  clear_has_joints();
}
const ::abb::egm::EgmJoints& EgmFeedBack::joints() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmFeedBack.joints)
  return joints_ != NULL ? *joints_
                         : *::abb::egm::EgmJoints::internal_default_instance();
}
::abb::egm::EgmJoints* EgmFeedBack::mutable_joints() {
  set_has_joints();
  if (joints_ == NULL) {
    joints_ = new ::abb::egm::EgmJoints;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmFeedBack.joints)
  return joints_;
}
::abb::egm::EgmJoints* EgmFeedBack::release_joints() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmFeedBack.joints)
  clear_has_joints();
  ::abb::egm::EgmJoints* temp = joints_;
  joints_ = NULL;
  return temp;
}
void EgmFeedBack::set_allocated_joints(::abb::egm::EgmJoints* joints) {
  delete joints_;
  joints_ = joints;
  if (joints) {
    set_has_joints();
  } else {
    clear_has_joints();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmFeedBack.joints)
}

// optional .abb.egm.EgmPose cartesian = 2;
bool EgmFeedBack::has_cartesian() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmFeedBack::set_has_cartesian() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmFeedBack::clear_has_cartesian() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmFeedBack::clear_cartesian() {
  if (cartesian_ != NULL) cartesian_->::abb::egm::EgmPose::Clear();
  clear_has_cartesian();
}
const ::abb::egm::EgmPose& EgmFeedBack::cartesian() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmFeedBack.cartesian)
  return cartesian_ != NULL ? *cartesian_
                         : *::abb::egm::EgmPose::internal_default_instance();
}
::abb::egm::EgmPose* EgmFeedBack::mutable_cartesian() {
  set_has_cartesian();
  if (cartesian_ == NULL) {
    cartesian_ = new ::abb::egm::EgmPose;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmFeedBack.cartesian)
  return cartesian_;
}
::abb::egm::EgmPose* EgmFeedBack::release_cartesian() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmFeedBack.cartesian)
  clear_has_cartesian();
  ::abb::egm::EgmPose* temp = cartesian_;
  cartesian_ = NULL;
  return temp;
}
void EgmFeedBack::set_allocated_cartesian(::abb::egm::EgmPose* cartesian) {
  delete cartesian_;
  cartesian_ = cartesian;
  if (cartesian) {
    set_has_cartesian();
  } else {
    clear_has_cartesian();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmFeedBack.cartesian)
}

// optional .abb.egm.EgmJoints externalJoints = 3;
bool EgmFeedBack::has_externaljoints() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgmFeedBack::set_has_externaljoints() {
  _has_bits_[0] |= 0x00000004u;
}
void EgmFeedBack::clear_has_externaljoints() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgmFeedBack::clear_externaljoints() {
  if (externaljoints_ != NULL) externaljoints_->::abb::egm::EgmJoints::Clear();
  clear_has_externaljoints();
}
const ::abb::egm::EgmJoints& EgmFeedBack::externaljoints() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmFeedBack.externalJoints)
  return externaljoints_ != NULL ? *externaljoints_
                         : *::abb::egm::EgmJoints::internal_default_instance();
}
::abb::egm::EgmJoints* EgmFeedBack::mutable_externaljoints() {
  set_has_externaljoints();
  if (externaljoints_ == NULL) {
    externaljoints_ = new ::abb::egm::EgmJoints;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmFeedBack.externalJoints)
  return externaljoints_;
}
::abb::egm::EgmJoints* EgmFeedBack::release_externaljoints() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmFeedBack.externalJoints)
  clear_has_externaljoints();
  ::abb::egm::EgmJoints* temp = externaljoints_;
  externaljoints_ = NULL;
  return temp;
}
void EgmFeedBack::set_allocated_externaljoints(::abb::egm::EgmJoints* externaljoints) {
  delete externaljoints_;
  externaljoints_ = externaljoints;
  if (externaljoints) {
    set_has_externaljoints();
  } else {
    clear_has_externaljoints();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmFeedBack.externalJoints)
}

inline const EgmFeedBack* EgmFeedBack::internal_default_instance() {
  return &EgmFeedBack_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* EgmMotorState_MotorStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmMotorState_MotorStateType_descriptor_;
}
bool EgmMotorState_MotorStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EgmMotorState_MotorStateType EgmMotorState::MOTORS_UNDEFINED;
const EgmMotorState_MotorStateType EgmMotorState::MOTORS_ON;
const EgmMotorState_MotorStateType EgmMotorState::MOTORS_OFF;
const EgmMotorState_MotorStateType EgmMotorState::MotorStateType_MIN;
const EgmMotorState_MotorStateType EgmMotorState::MotorStateType_MAX;
const int EgmMotorState::MotorStateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmMotorState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmMotorState::EgmMotorState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmMotorState)
}

void EgmMotorState::InitAsDefaultInstance() {
}

EgmMotorState::EgmMotorState(const EgmMotorState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmMotorState)
}

void EgmMotorState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
}

EgmMotorState::~EgmMotorState() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmMotorState)
  SharedDtor();
}

void EgmMotorState::SharedDtor() {
}

void EgmMotorState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmMotorState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmMotorState_descriptor_;
}

const EgmMotorState& EgmMotorState::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmMotorState> EgmMotorState_default_instance_;

EgmMotorState* EgmMotorState::New(::google::protobuf::Arena* arena) const {
  EgmMotorState* n = new EgmMotorState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmMotorState::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmMotorState)
  state_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmMotorState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmMotorState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .abb.egm.EgmMotorState.MotorStateType state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::abb::egm::EgmMotorState_MotorStateType_IsValid(value)) {
            set_state(static_cast< ::abb::egm::EgmMotorState_MotorStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmMotorState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmMotorState)
  return false;
#undef DO_
}

void EgmMotorState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmMotorState)
  // required .abb.egm.EgmMotorState.MotorStateType state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmMotorState)
}

::google::protobuf::uint8* EgmMotorState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmMotorState)
  // required .abb.egm.EgmMotorState.MotorStateType state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmMotorState)
  return target;
}

size_t EgmMotorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmMotorState)
  size_t total_size = 0;

  // required .abb.egm.EgmMotorState.MotorStateType state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmMotorState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmMotorState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmMotorState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmMotorState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmMotorState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmMotorState)
    UnsafeMergeFrom(*source);
  }
}

void EgmMotorState::MergeFrom(const EgmMotorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmMotorState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmMotorState::UnsafeMergeFrom(const EgmMotorState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmMotorState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmMotorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmMotorState::CopyFrom(const EgmMotorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmMotorState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmMotorState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EgmMotorState::Swap(EgmMotorState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmMotorState::InternalSwap(EgmMotorState* other) {
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmMotorState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmMotorState_descriptor_;
  metadata.reflection = EgmMotorState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmMotorState

// required .abb.egm.EgmMotorState.MotorStateType state = 1;
bool EgmMotorState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmMotorState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmMotorState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmMotorState::clear_state() {
  state_ = 0;
  clear_has_state();
}
::abb::egm::EgmMotorState_MotorStateType EgmMotorState::state() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmMotorState.state)
  return static_cast< ::abb::egm::EgmMotorState_MotorStateType >(state_);
}
void EgmMotorState::set_state(::abb::egm::EgmMotorState_MotorStateType value) {
  assert(::abb::egm::EgmMotorState_MotorStateType_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmMotorState.state)
}

inline const EgmMotorState* EgmMotorState::internal_default_instance() {
  return &EgmMotorState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* EgmMCIState_MCIStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmMCIState_MCIStateType_descriptor_;
}
bool EgmMCIState_MCIStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EgmMCIState_MCIStateType EgmMCIState::MCI_UNDEFINED;
const EgmMCIState_MCIStateType EgmMCIState::MCI_ERROR;
const EgmMCIState_MCIStateType EgmMCIState::MCI_STOPPED;
const EgmMCIState_MCIStateType EgmMCIState::MCI_RUNNING;
const EgmMCIState_MCIStateType EgmMCIState::MCIStateType_MIN;
const EgmMCIState_MCIStateType EgmMCIState::MCIStateType_MAX;
const int EgmMCIState::MCIStateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmMCIState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmMCIState::EgmMCIState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmMCIState)
}

void EgmMCIState::InitAsDefaultInstance() {
}

EgmMCIState::EgmMCIState(const EgmMCIState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmMCIState)
}

void EgmMCIState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
}

EgmMCIState::~EgmMCIState() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmMCIState)
  SharedDtor();
}

void EgmMCIState::SharedDtor() {
}

void EgmMCIState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmMCIState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmMCIState_descriptor_;
}

const EgmMCIState& EgmMCIState::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmMCIState> EgmMCIState_default_instance_;

EgmMCIState* EgmMCIState::New(::google::protobuf::Arena* arena) const {
  EgmMCIState* n = new EgmMCIState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmMCIState::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmMCIState)
  state_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmMCIState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmMCIState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .abb.egm.EgmMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::abb::egm::EgmMCIState_MCIStateType_IsValid(value)) {
            set_state(static_cast< ::abb::egm::EgmMCIState_MCIStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmMCIState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmMCIState)
  return false;
#undef DO_
}

void EgmMCIState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmMCIState)
  // required .abb.egm.EgmMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmMCIState)
}

::google::protobuf::uint8* EgmMCIState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmMCIState)
  // required .abb.egm.EgmMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmMCIState)
  return target;
}

size_t EgmMCIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmMCIState)
  size_t total_size = 0;

  // required .abb.egm.EgmMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmMCIState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmMCIState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmMCIState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmMCIState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmMCIState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmMCIState)
    UnsafeMergeFrom(*source);
  }
}

void EgmMCIState::MergeFrom(const EgmMCIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmMCIState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmMCIState::UnsafeMergeFrom(const EgmMCIState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmMCIState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmMCIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmMCIState::CopyFrom(const EgmMCIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmMCIState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmMCIState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EgmMCIState::Swap(EgmMCIState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmMCIState::InternalSwap(EgmMCIState* other) {
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmMCIState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmMCIState_descriptor_;
  metadata.reflection = EgmMCIState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmMCIState

// required .abb.egm.EgmMCIState.MCIStateType state = 1 [default = MCI_UNDEFINED];
bool EgmMCIState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmMCIState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmMCIState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmMCIState::clear_state() {
  state_ = 0;
  clear_has_state();
}
::abb::egm::EgmMCIState_MCIStateType EgmMCIState::state() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmMCIState.state)
  return static_cast< ::abb::egm::EgmMCIState_MCIStateType >(state_);
}
void EgmMCIState::set_state(::abb::egm::EgmMCIState_MCIStateType value) {
  assert(::abb::egm::EgmMCIState_MCIStateType_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmMCIState.state)
}

inline const EgmMCIState* EgmMCIState::internal_default_instance() {
  return &EgmMCIState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* EgmRapidCtrlExecState_RapidCtrlExecStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmRapidCtrlExecState_RapidCtrlExecStateType_descriptor_;
}
bool EgmRapidCtrlExecState_RapidCtrlExecStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::RAPID_UNDEFINED;
const EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::RAPID_STOPPED;
const EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::RAPID_RUNNING;
const EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::RapidCtrlExecStateType_MIN;
const EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::RapidCtrlExecStateType_MAX;
const int EgmRapidCtrlExecState::RapidCtrlExecStateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmRapidCtrlExecState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmRapidCtrlExecState::EgmRapidCtrlExecState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmRapidCtrlExecState)
}

void EgmRapidCtrlExecState::InitAsDefaultInstance() {
}

EgmRapidCtrlExecState::EgmRapidCtrlExecState(const EgmRapidCtrlExecState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmRapidCtrlExecState)
}

void EgmRapidCtrlExecState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
}

EgmRapidCtrlExecState::~EgmRapidCtrlExecState() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmRapidCtrlExecState)
  SharedDtor();
}

void EgmRapidCtrlExecState::SharedDtor() {
}

void EgmRapidCtrlExecState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmRapidCtrlExecState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmRapidCtrlExecState_descriptor_;
}

const EgmRapidCtrlExecState& EgmRapidCtrlExecState::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmRapidCtrlExecState> EgmRapidCtrlExecState_default_instance_;

EgmRapidCtrlExecState* EgmRapidCtrlExecState::New(::google::protobuf::Arena* arena) const {
  EgmRapidCtrlExecState* n = new EgmRapidCtrlExecState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmRapidCtrlExecState::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmRapidCtrlExecState)
  state_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmRapidCtrlExecState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmRapidCtrlExecState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .abb.egm.EgmRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::abb::egm::EgmRapidCtrlExecState_RapidCtrlExecStateType_IsValid(value)) {
            set_state(static_cast< ::abb::egm::EgmRapidCtrlExecState_RapidCtrlExecStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmRapidCtrlExecState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmRapidCtrlExecState)
  return false;
#undef DO_
}

void EgmRapidCtrlExecState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmRapidCtrlExecState)
  // required .abb.egm.EgmRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmRapidCtrlExecState)
}

::google::protobuf::uint8* EgmRapidCtrlExecState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmRapidCtrlExecState)
  // required .abb.egm.EgmRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmRapidCtrlExecState)
  return target;
}

size_t EgmRapidCtrlExecState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmRapidCtrlExecState)
  size_t total_size = 0;

  // required .abb.egm.EgmRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmRapidCtrlExecState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmRapidCtrlExecState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmRapidCtrlExecState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmRapidCtrlExecState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmRapidCtrlExecState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmRapidCtrlExecState)
    UnsafeMergeFrom(*source);
  }
}

void EgmRapidCtrlExecState::MergeFrom(const EgmRapidCtrlExecState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmRapidCtrlExecState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmRapidCtrlExecState::UnsafeMergeFrom(const EgmRapidCtrlExecState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmRapidCtrlExecState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmRapidCtrlExecState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmRapidCtrlExecState::CopyFrom(const EgmRapidCtrlExecState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmRapidCtrlExecState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmRapidCtrlExecState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EgmRapidCtrlExecState::Swap(EgmRapidCtrlExecState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmRapidCtrlExecState::InternalSwap(EgmRapidCtrlExecState* other) {
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmRapidCtrlExecState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmRapidCtrlExecState_descriptor_;
  metadata.reflection = EgmRapidCtrlExecState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmRapidCtrlExecState

// required .abb.egm.EgmRapidCtrlExecState.RapidCtrlExecStateType state = 1 [default = RAPID_UNDEFINED];
bool EgmRapidCtrlExecState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmRapidCtrlExecState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmRapidCtrlExecState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmRapidCtrlExecState::clear_state() {
  state_ = 0;
  clear_has_state();
}
::abb::egm::EgmRapidCtrlExecState_RapidCtrlExecStateType EgmRapidCtrlExecState::state() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmRapidCtrlExecState.state)
  return static_cast< ::abb::egm::EgmRapidCtrlExecState_RapidCtrlExecStateType >(state_);
}
void EgmRapidCtrlExecState::set_state(::abb::egm::EgmRapidCtrlExecState_RapidCtrlExecStateType value) {
  assert(::abb::egm::EgmRapidCtrlExecState_RapidCtrlExecStateType_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmRapidCtrlExecState.state)
}

inline const EgmRapidCtrlExecState* EgmRapidCtrlExecState::internal_default_instance() {
  return &EgmRapidCtrlExecState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmTestSignals::kSignalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmTestSignals::EgmTestSignals()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmTestSignals)
}

void EgmTestSignals::InitAsDefaultInstance() {
}

EgmTestSignals::EgmTestSignals(const EgmTestSignals& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmTestSignals)
}

void EgmTestSignals::SharedCtor() {
  _cached_size_ = 0;
}

EgmTestSignals::~EgmTestSignals() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmTestSignals)
  SharedDtor();
}

void EgmTestSignals::SharedDtor() {
}

void EgmTestSignals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmTestSignals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmTestSignals_descriptor_;
}

const EgmTestSignals& EgmTestSignals::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmTestSignals> EgmTestSignals_default_instance_;

EgmTestSignals* EgmTestSignals::New(::google::protobuf::Arena* arena) const {
  EgmTestSignals* n = new EgmTestSignals;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmTestSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmTestSignals)
  signals_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmTestSignals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmTestSignals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double signals = 1;
      case 1: {
        if (tag == 9) {
         parse_signals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_signals())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_signals())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_signals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmTestSignals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmTestSignals)
  return false;
#undef DO_
}

void EgmTestSignals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmTestSignals)
  // repeated double signals = 1;
  for (int i = 0; i < this->signals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->signals(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmTestSignals)
}

::google::protobuf::uint8* EgmTestSignals::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmTestSignals)
  // repeated double signals = 1;
  for (int i = 0; i < this->signals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->signals(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmTestSignals)
  return target;
}

size_t EgmTestSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmTestSignals)
  size_t total_size = 0;

  // repeated double signals = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->signals_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->signals_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmTestSignals::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmTestSignals)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmTestSignals* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmTestSignals>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmTestSignals)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmTestSignals)
    UnsafeMergeFrom(*source);
  }
}

void EgmTestSignals::MergeFrom(const EgmTestSignals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmTestSignals)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmTestSignals::UnsafeMergeFrom(const EgmTestSignals& from) {
  GOOGLE_DCHECK(&from != this);
  signals_.UnsafeMergeFrom(from.signals_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmTestSignals::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmTestSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmTestSignals::CopyFrom(const EgmTestSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmTestSignals)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmTestSignals::IsInitialized() const {

  return true;
}

void EgmTestSignals::Swap(EgmTestSignals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmTestSignals::InternalSwap(EgmTestSignals* other) {
  signals_.UnsafeArenaSwap(&other->signals_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmTestSignals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmTestSignals_descriptor_;
  metadata.reflection = EgmTestSignals_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmTestSignals

// repeated double signals = 1;
int EgmTestSignals::signals_size() const {
  return signals_.size();
}
void EgmTestSignals::clear_signals() {
  signals_.Clear();
}
double EgmTestSignals::signals(int index) const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmTestSignals.signals)
  return signals_.Get(index);
}
void EgmTestSignals::set_signals(int index, double value) {
  signals_.Set(index, value);
  // @@protoc_insertion_point(field_set:abb.egm.EgmTestSignals.signals)
}
void EgmTestSignals::add_signals(double value) {
  signals_.Add(value);
  // @@protoc_insertion_point(field_add:abb.egm.EgmTestSignals.signals)
}
const ::google::protobuf::RepeatedField< double >&
EgmTestSignals::signals() const {
  // @@protoc_insertion_point(field_list:abb.egm.EgmTestSignals.signals)
  return signals_;
}
::google::protobuf::RepeatedField< double >*
EgmTestSignals::mutable_signals() {
  // @@protoc_insertion_point(field_mutable_list:abb.egm.EgmTestSignals.signals)
  return &signals_;
}

inline const EgmTestSignals* EgmTestSignals::internal_default_instance() {
  return &EgmTestSignals_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmRobot::kHeaderFieldNumber;
const int EgmRobot::kFeedBackFieldNumber;
const int EgmRobot::kPlannedFieldNumber;
const int EgmRobot::kMotorStateFieldNumber;
const int EgmRobot::kMciStateFieldNumber;
const int EgmRobot::kMciConvergenceMetFieldNumber;
const int EgmRobot::kTestSignalsFieldNumber;
const int EgmRobot::kRapidExecStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmRobot::EgmRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmRobot)
}

void EgmRobot::InitAsDefaultInstance() {
  header_ = const_cast< ::abb::egm::EgmHeader*>(
      ::abb::egm::EgmHeader::internal_default_instance());
  feedback_ = const_cast< ::abb::egm::EgmFeedBack*>(
      ::abb::egm::EgmFeedBack::internal_default_instance());
  planned_ = const_cast< ::abb::egm::EgmPlanned*>(
      ::abb::egm::EgmPlanned::internal_default_instance());
  motorstate_ = const_cast< ::abb::egm::EgmMotorState*>(
      ::abb::egm::EgmMotorState::internal_default_instance());
  mcistate_ = const_cast< ::abb::egm::EgmMCIState*>(
      ::abb::egm::EgmMCIState::internal_default_instance());
  testsignals_ = const_cast< ::abb::egm::EgmTestSignals*>(
      ::abb::egm::EgmTestSignals::internal_default_instance());
  rapidexecstate_ = const_cast< ::abb::egm::EgmRapidCtrlExecState*>(
      ::abb::egm::EgmRapidCtrlExecState::internal_default_instance());
}

EgmRobot::EgmRobot(const EgmRobot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmRobot)
}

void EgmRobot::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  feedback_ = NULL;
  planned_ = NULL;
  motorstate_ = NULL;
  mcistate_ = NULL;
  testsignals_ = NULL;
  rapidexecstate_ = NULL;
  mciconvergencemet_ = false;
}

EgmRobot::~EgmRobot() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmRobot)
  SharedDtor();
}

void EgmRobot::SharedDtor() {
  if (this != &EgmRobot_default_instance_.get()) {
    delete header_;
    delete feedback_;
    delete planned_;
    delete motorstate_;
    delete mcistate_;
    delete testsignals_;
    delete rapidexecstate_;
  }
}

void EgmRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmRobot_descriptor_;
}

const EgmRobot& EgmRobot::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmRobot> EgmRobot_default_instance_;

EgmRobot* EgmRobot::New(::google::protobuf::Arena* arena) const {
  EgmRobot* n = new EgmRobot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmRobot)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_header()) {
      if (header_ != NULL) header_->::abb::egm::EgmHeader::Clear();
    }
    if (has_feedback()) {
      if (feedback_ != NULL) feedback_->::abb::egm::EgmFeedBack::Clear();
    }
    if (has_planned()) {
      if (planned_ != NULL) planned_->::abb::egm::EgmPlanned::Clear();
    }
    if (has_motorstate()) {
      if (motorstate_ != NULL) motorstate_->::abb::egm::EgmMotorState::Clear();
    }
    if (has_mcistate()) {
      if (mcistate_ != NULL) mcistate_->::abb::egm::EgmMCIState::Clear();
    }
    mciconvergencemet_ = false;
    if (has_testsignals()) {
      if (testsignals_ != NULL) testsignals_->::abb::egm::EgmTestSignals::Clear();
    }
    if (has_rapidexecstate()) {
      if (rapidexecstate_ != NULL) rapidexecstate_->::abb::egm::EgmRapidCtrlExecState::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.EgmHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feedBack;
        break;
      }

      // optional .abb.egm.EgmFeedBack feedBack = 2;
      case 2: {
        if (tag == 18) {
         parse_feedBack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feedback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_planned;
        break;
      }

      // optional .abb.egm.EgmPlanned planned = 3;
      case 3: {
        if (tag == 26) {
         parse_planned:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planned()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_motorState;
        break;
      }

      // optional .abb.egm.EgmMotorState motorState = 4;
      case 4: {
        if (tag == 34) {
         parse_motorState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motorstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mciState;
        break;
      }

      // optional .abb.egm.EgmMCIState mciState = 5;
      case 5: {
        if (tag == 42) {
         parse_mciState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mcistate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mciConvergenceMet;
        break;
      }

      // optional bool mciConvergenceMet = 6;
      case 6: {
        if (tag == 48) {
         parse_mciConvergenceMet:
          set_has_mciconvergencemet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mciconvergencemet_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_testSignals;
        break;
      }

      // optional .abb.egm.EgmTestSignals testSignals = 7;
      case 7: {
        if (tag == 58) {
         parse_testSignals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_testsignals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rapidExecState;
        break;
      }

      // optional .abb.egm.EgmRapidCtrlExecState rapidExecState = 8;
      case 8: {
        if (tag == 66) {
         parse_rapidExecState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rapidexecstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmRobot)
  return false;
#undef DO_
}

void EgmRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmRobot)
  // optional .abb.egm.EgmHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .abb.egm.EgmFeedBack feedBack = 2;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->feedback_, output);
  }

  // optional .abb.egm.EgmPlanned planned = 3;
  if (has_planned()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->planned_, output);
  }

  // optional .abb.egm.EgmMotorState motorState = 4;
  if (has_motorstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->motorstate_, output);
  }

  // optional .abb.egm.EgmMCIState mciState = 5;
  if (has_mcistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->mcistate_, output);
  }

  // optional bool mciConvergenceMet = 6;
  if (has_mciconvergencemet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mciconvergencemet(), output);
  }

  // optional .abb.egm.EgmTestSignals testSignals = 7;
  if (has_testsignals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->testsignals_, output);
  }

  // optional .abb.egm.EgmRapidCtrlExecState rapidExecState = 8;
  if (has_rapidexecstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->rapidexecstate_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmRobot)
}

::google::protobuf::uint8* EgmRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmRobot)
  // optional .abb.egm.EgmHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .abb.egm.EgmFeedBack feedBack = 2;
  if (has_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->feedback_, false, target);
  }

  // optional .abb.egm.EgmPlanned planned = 3;
  if (has_planned()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->planned_, false, target);
  }

  // optional .abb.egm.EgmMotorState motorState = 4;
  if (has_motorstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->motorstate_, false, target);
  }

  // optional .abb.egm.EgmMCIState mciState = 5;
  if (has_mcistate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->mcistate_, false, target);
  }

  // optional bool mciConvergenceMet = 6;
  if (has_mciconvergencemet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mciconvergencemet(), target);
  }

  // optional .abb.egm.EgmTestSignals testSignals = 7;
  if (has_testsignals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->testsignals_, false, target);
  }

  // optional .abb.egm.EgmRapidCtrlExecState rapidExecState = 8;
  if (has_rapidexecstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->rapidexecstate_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmRobot)
  return target;
}

size_t EgmRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmRobot)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .abb.egm.EgmHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .abb.egm.EgmFeedBack feedBack = 2;
    if (has_feedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->feedback_);
    }

    // optional .abb.egm.EgmPlanned planned = 3;
    if (has_planned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->planned_);
    }

    // optional .abb.egm.EgmMotorState motorState = 4;
    if (has_motorstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->motorstate_);
    }

    // optional .abb.egm.EgmMCIState mciState = 5;
    if (has_mcistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mcistate_);
    }

    // optional bool mciConvergenceMet = 6;
    if (has_mciconvergencemet()) {
      total_size += 1 + 1;
    }

    // optional .abb.egm.EgmTestSignals testSignals = 7;
    if (has_testsignals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->testsignals_);
    }

    // optional .abb.egm.EgmRapidCtrlExecState rapidExecState = 8;
    if (has_rapidexecstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rapidexecstate_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmRobot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmRobot)
    UnsafeMergeFrom(*source);
  }
}

void EgmRobot::MergeFrom(const EgmRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmRobot)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmRobot::UnsafeMergeFrom(const EgmRobot& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::abb::egm::EgmHeader::MergeFrom(from.header());
    }
    if (from.has_feedback()) {
      mutable_feedback()->::abb::egm::EgmFeedBack::MergeFrom(from.feedback());
    }
    if (from.has_planned()) {
      mutable_planned()->::abb::egm::EgmPlanned::MergeFrom(from.planned());
    }
    if (from.has_motorstate()) {
      mutable_motorstate()->::abb::egm::EgmMotorState::MergeFrom(from.motorstate());
    }
    if (from.has_mcistate()) {
      mutable_mcistate()->::abb::egm::EgmMCIState::MergeFrom(from.mcistate());
    }
    if (from.has_mciconvergencemet()) {
      set_mciconvergencemet(from.mciconvergencemet());
    }
    if (from.has_testsignals()) {
      mutable_testsignals()->::abb::egm::EgmTestSignals::MergeFrom(from.testsignals());
    }
    if (from.has_rapidexecstate()) {
      mutable_rapidexecstate()->::abb::egm::EgmRapidCtrlExecState::MergeFrom(from.rapidexecstate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmRobot::CopyFrom(const EgmRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmRobot)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmRobot::IsInitialized() const {

  if (has_feedback()) {
    if (!this->feedback_->IsInitialized()) return false;
  }
  if (has_planned()) {
    if (!this->planned_->IsInitialized()) return false;
  }
  if (has_motorstate()) {
    if (!this->motorstate_->IsInitialized()) return false;
  }
  if (has_mcistate()) {
    if (!this->mcistate_->IsInitialized()) return false;
  }
  if (has_rapidexecstate()) {
    if (!this->rapidexecstate_->IsInitialized()) return false;
  }
  return true;
}

void EgmRobot::Swap(EgmRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmRobot::InternalSwap(EgmRobot* other) {
  std::swap(header_, other->header_);
  std::swap(feedback_, other->feedback_);
  std::swap(planned_, other->planned_);
  std::swap(motorstate_, other->motorstate_);
  std::swap(mcistate_, other->mcistate_);
  std::swap(mciconvergencemet_, other->mciconvergencemet_);
  std::swap(testsignals_, other->testsignals_);
  std::swap(rapidexecstate_, other->rapidexecstate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmRobot_descriptor_;
  metadata.reflection = EgmRobot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmRobot

// optional .abb.egm.EgmHeader header = 1;
bool EgmRobot::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmRobot::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmRobot::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmRobot::clear_header() {
  if (header_ != NULL) header_->::abb::egm::EgmHeader::Clear();
  clear_has_header();
}
const ::abb::egm::EgmHeader& EgmRobot::header() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmRobot.header)
  return header_ != NULL ? *header_
                         : *::abb::egm::EgmHeader::internal_default_instance();
}
::abb::egm::EgmHeader* EgmRobot::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::abb::egm::EgmHeader;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmRobot.header)
  return header_;
}
::abb::egm::EgmHeader* EgmRobot::release_header() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmRobot.header)
  clear_has_header();
  ::abb::egm::EgmHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void EgmRobot::set_allocated_header(::abb::egm::EgmHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmRobot.header)
}

// optional .abb.egm.EgmFeedBack feedBack = 2;
bool EgmRobot::has_feedback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmRobot::set_has_feedback() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmRobot::clear_has_feedback() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmRobot::clear_feedback() {
  if (feedback_ != NULL) feedback_->::abb::egm::EgmFeedBack::Clear();
  clear_has_feedback();
}
const ::abb::egm::EgmFeedBack& EgmRobot::feedback() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmRobot.feedBack)
  return feedback_ != NULL ? *feedback_
                         : *::abb::egm::EgmFeedBack::internal_default_instance();
}
::abb::egm::EgmFeedBack* EgmRobot::mutable_feedback() {
  set_has_feedback();
  if (feedback_ == NULL) {
    feedback_ = new ::abb::egm::EgmFeedBack;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmRobot.feedBack)
  return feedback_;
}
::abb::egm::EgmFeedBack* EgmRobot::release_feedback() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmRobot.feedBack)
  clear_has_feedback();
  ::abb::egm::EgmFeedBack* temp = feedback_;
  feedback_ = NULL;
  return temp;
}
void EgmRobot::set_allocated_feedback(::abb::egm::EgmFeedBack* feedback) {
  delete feedback_;
  feedback_ = feedback;
  if (feedback) {
    set_has_feedback();
  } else {
    clear_has_feedback();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmRobot.feedBack)
}

// optional .abb.egm.EgmPlanned planned = 3;
bool EgmRobot::has_planned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgmRobot::set_has_planned() {
  _has_bits_[0] |= 0x00000004u;
}
void EgmRobot::clear_has_planned() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgmRobot::clear_planned() {
  if (planned_ != NULL) planned_->::abb::egm::EgmPlanned::Clear();
  clear_has_planned();
}
const ::abb::egm::EgmPlanned& EgmRobot::planned() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmRobot.planned)
  return planned_ != NULL ? *planned_
                         : *::abb::egm::EgmPlanned::internal_default_instance();
}
::abb::egm::EgmPlanned* EgmRobot::mutable_planned() {
  set_has_planned();
  if (planned_ == NULL) {
    planned_ = new ::abb::egm::EgmPlanned;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmRobot.planned)
  return planned_;
}
::abb::egm::EgmPlanned* EgmRobot::release_planned() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmRobot.planned)
  clear_has_planned();
  ::abb::egm::EgmPlanned* temp = planned_;
  planned_ = NULL;
  return temp;
}
void EgmRobot::set_allocated_planned(::abb::egm::EgmPlanned* planned) {
  delete planned_;
  planned_ = planned;
  if (planned) {
    set_has_planned();
  } else {
    clear_has_planned();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmRobot.planned)
}

// optional .abb.egm.EgmMotorState motorState = 4;
bool EgmRobot::has_motorstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EgmRobot::set_has_motorstate() {
  _has_bits_[0] |= 0x00000008u;
}
void EgmRobot::clear_has_motorstate() {
  _has_bits_[0] &= ~0x00000008u;
}
void EgmRobot::clear_motorstate() {
  if (motorstate_ != NULL) motorstate_->::abb::egm::EgmMotorState::Clear();
  clear_has_motorstate();
}
const ::abb::egm::EgmMotorState& EgmRobot::motorstate() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmRobot.motorState)
  return motorstate_ != NULL ? *motorstate_
                         : *::abb::egm::EgmMotorState::internal_default_instance();
}
::abb::egm::EgmMotorState* EgmRobot::mutable_motorstate() {
  set_has_motorstate();
  if (motorstate_ == NULL) {
    motorstate_ = new ::abb::egm::EgmMotorState;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmRobot.motorState)
  return motorstate_;
}
::abb::egm::EgmMotorState* EgmRobot::release_motorstate() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmRobot.motorState)
  clear_has_motorstate();
  ::abb::egm::EgmMotorState* temp = motorstate_;
  motorstate_ = NULL;
  return temp;
}
void EgmRobot::set_allocated_motorstate(::abb::egm::EgmMotorState* motorstate) {
  delete motorstate_;
  motorstate_ = motorstate;
  if (motorstate) {
    set_has_motorstate();
  } else {
    clear_has_motorstate();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmRobot.motorState)
}

// optional .abb.egm.EgmMCIState mciState = 5;
bool EgmRobot::has_mcistate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EgmRobot::set_has_mcistate() {
  _has_bits_[0] |= 0x00000010u;
}
void EgmRobot::clear_has_mcistate() {
  _has_bits_[0] &= ~0x00000010u;
}
void EgmRobot::clear_mcistate() {
  if (mcistate_ != NULL) mcistate_->::abb::egm::EgmMCIState::Clear();
  clear_has_mcistate();
}
const ::abb::egm::EgmMCIState& EgmRobot::mcistate() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmRobot.mciState)
  return mcistate_ != NULL ? *mcistate_
                         : *::abb::egm::EgmMCIState::internal_default_instance();
}
::abb::egm::EgmMCIState* EgmRobot::mutable_mcistate() {
  set_has_mcistate();
  if (mcistate_ == NULL) {
    mcistate_ = new ::abb::egm::EgmMCIState;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmRobot.mciState)
  return mcistate_;
}
::abb::egm::EgmMCIState* EgmRobot::release_mcistate() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmRobot.mciState)
  clear_has_mcistate();
  ::abb::egm::EgmMCIState* temp = mcistate_;
  mcistate_ = NULL;
  return temp;
}
void EgmRobot::set_allocated_mcistate(::abb::egm::EgmMCIState* mcistate) {
  delete mcistate_;
  mcistate_ = mcistate;
  if (mcistate) {
    set_has_mcistate();
  } else {
    clear_has_mcistate();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmRobot.mciState)
}

// optional bool mciConvergenceMet = 6;
bool EgmRobot::has_mciconvergencemet() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EgmRobot::set_has_mciconvergencemet() {
  _has_bits_[0] |= 0x00000020u;
}
void EgmRobot::clear_has_mciconvergencemet() {
  _has_bits_[0] &= ~0x00000020u;
}
void EgmRobot::clear_mciconvergencemet() {
  mciconvergencemet_ = false;
  clear_has_mciconvergencemet();
}
bool EgmRobot::mciconvergencemet() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmRobot.mciConvergenceMet)
  return mciconvergencemet_;
}
void EgmRobot::set_mciconvergencemet(bool value) {
  set_has_mciconvergencemet();
  mciconvergencemet_ = value;
  // @@protoc_insertion_point(field_set:abb.egm.EgmRobot.mciConvergenceMet)
}

// optional .abb.egm.EgmTestSignals testSignals = 7;
bool EgmRobot::has_testsignals() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EgmRobot::set_has_testsignals() {
  _has_bits_[0] |= 0x00000040u;
}
void EgmRobot::clear_has_testsignals() {
  _has_bits_[0] &= ~0x00000040u;
}
void EgmRobot::clear_testsignals() {
  if (testsignals_ != NULL) testsignals_->::abb::egm::EgmTestSignals::Clear();
  clear_has_testsignals();
}
const ::abb::egm::EgmTestSignals& EgmRobot::testsignals() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmRobot.testSignals)
  return testsignals_ != NULL ? *testsignals_
                         : *::abb::egm::EgmTestSignals::internal_default_instance();
}
::abb::egm::EgmTestSignals* EgmRobot::mutable_testsignals() {
  set_has_testsignals();
  if (testsignals_ == NULL) {
    testsignals_ = new ::abb::egm::EgmTestSignals;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmRobot.testSignals)
  return testsignals_;
}
::abb::egm::EgmTestSignals* EgmRobot::release_testsignals() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmRobot.testSignals)
  clear_has_testsignals();
  ::abb::egm::EgmTestSignals* temp = testsignals_;
  testsignals_ = NULL;
  return temp;
}
void EgmRobot::set_allocated_testsignals(::abb::egm::EgmTestSignals* testsignals) {
  delete testsignals_;
  testsignals_ = testsignals;
  if (testsignals) {
    set_has_testsignals();
  } else {
    clear_has_testsignals();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmRobot.testSignals)
}

// optional .abb.egm.EgmRapidCtrlExecState rapidExecState = 8;
bool EgmRobot::has_rapidexecstate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EgmRobot::set_has_rapidexecstate() {
  _has_bits_[0] |= 0x00000080u;
}
void EgmRobot::clear_has_rapidexecstate() {
  _has_bits_[0] &= ~0x00000080u;
}
void EgmRobot::clear_rapidexecstate() {
  if (rapidexecstate_ != NULL) rapidexecstate_->::abb::egm::EgmRapidCtrlExecState::Clear();
  clear_has_rapidexecstate();
}
const ::abb::egm::EgmRapidCtrlExecState& EgmRobot::rapidexecstate() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmRobot.rapidExecState)
  return rapidexecstate_ != NULL ? *rapidexecstate_
                         : *::abb::egm::EgmRapidCtrlExecState::internal_default_instance();
}
::abb::egm::EgmRapidCtrlExecState* EgmRobot::mutable_rapidexecstate() {
  set_has_rapidexecstate();
  if (rapidexecstate_ == NULL) {
    rapidexecstate_ = new ::abb::egm::EgmRapidCtrlExecState;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmRobot.rapidExecState)
  return rapidexecstate_;
}
::abb::egm::EgmRapidCtrlExecState* EgmRobot::release_rapidexecstate() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmRobot.rapidExecState)
  clear_has_rapidexecstate();
  ::abb::egm::EgmRapidCtrlExecState* temp = rapidexecstate_;
  rapidexecstate_ = NULL;
  return temp;
}
void EgmRobot::set_allocated_rapidexecstate(::abb::egm::EgmRapidCtrlExecState* rapidexecstate) {
  delete rapidexecstate_;
  rapidexecstate_ = rapidexecstate;
  if (rapidexecstate) {
    set_has_rapidexecstate();
  } else {
    clear_has_rapidexecstate();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmRobot.rapidExecState)
}

inline const EgmRobot* EgmRobot::internal_default_instance() {
  return &EgmRobot_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmSensor::kHeaderFieldNumber;
const int EgmSensor::kPlannedFieldNumber;
const int EgmSensor::kSpeedRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmSensor::EgmSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmSensor)
}

void EgmSensor::InitAsDefaultInstance() {
  header_ = const_cast< ::abb::egm::EgmHeader*>(
      ::abb::egm::EgmHeader::internal_default_instance());
  planned_ = const_cast< ::abb::egm::EgmPlanned*>(
      ::abb::egm::EgmPlanned::internal_default_instance());
  speedref_ = const_cast< ::abb::egm::EgmSpeedRef*>(
      ::abb::egm::EgmSpeedRef::internal_default_instance());
}

EgmSensor::EgmSensor(const EgmSensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmSensor)
}

void EgmSensor::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  planned_ = NULL;
  speedref_ = NULL;
}

EgmSensor::~EgmSensor() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmSensor)
  SharedDtor();
}

void EgmSensor::SharedDtor() {
  if (this != &EgmSensor_default_instance_.get()) {
    delete header_;
    delete planned_;
    delete speedref_;
  }
}

void EgmSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmSensor_descriptor_;
}

const EgmSensor& EgmSensor::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmSensor> EgmSensor_default_instance_;

EgmSensor* EgmSensor::New(::google::protobuf::Arena* arena) const {
  EgmSensor* n = new EgmSensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmSensor)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      if (header_ != NULL) header_->::abb::egm::EgmHeader::Clear();
    }
    if (has_planned()) {
      if (planned_ != NULL) planned_->::abb::egm::EgmPlanned::Clear();
    }
    if (has_speedref()) {
      if (speedref_ != NULL) speedref_->::abb::egm::EgmSpeedRef::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmSensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.EgmHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_planned;
        break;
      }

      // optional .abb.egm.EgmPlanned planned = 2;
      case 2: {
        if (tag == 18) {
         parse_planned:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planned()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_speedRef;
        break;
      }

      // optional .abb.egm.EgmSpeedRef speedRef = 3;
      case 3: {
        if (tag == 26) {
         parse_speedRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speedref()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmSensor)
  return false;
#undef DO_
}

void EgmSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmSensor)
  // optional .abb.egm.EgmHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .abb.egm.EgmPlanned planned = 2;
  if (has_planned()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->planned_, output);
  }

  // optional .abb.egm.EgmSpeedRef speedRef = 3;
  if (has_speedref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->speedref_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmSensor)
}

::google::protobuf::uint8* EgmSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmSensor)
  // optional .abb.egm.EgmHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .abb.egm.EgmPlanned planned = 2;
  if (has_planned()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->planned_, false, target);
  }

  // optional .abb.egm.EgmSpeedRef speedRef = 3;
  if (has_speedref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->speedref_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmSensor)
  return target;
}

size_t EgmSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmSensor)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .abb.egm.EgmHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .abb.egm.EgmPlanned planned = 2;
    if (has_planned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->planned_);
    }

    // optional .abb.egm.EgmSpeedRef speedRef = 3;
    if (has_speedref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speedref_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmSensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmSensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmSensor)
    UnsafeMergeFrom(*source);
  }
}

void EgmSensor::MergeFrom(const EgmSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmSensor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmSensor::UnsafeMergeFrom(const EgmSensor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::abb::egm::EgmHeader::MergeFrom(from.header());
    }
    if (from.has_planned()) {
      mutable_planned()->::abb::egm::EgmPlanned::MergeFrom(from.planned());
    }
    if (from.has_speedref()) {
      mutable_speedref()->::abb::egm::EgmSpeedRef::MergeFrom(from.speedref());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmSensor::CopyFrom(const EgmSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmSensor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmSensor::IsInitialized() const {

  if (has_planned()) {
    if (!this->planned_->IsInitialized()) return false;
  }
  return true;
}

void EgmSensor::Swap(EgmSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmSensor::InternalSwap(EgmSensor* other) {
  std::swap(header_, other->header_);
  std::swap(planned_, other->planned_);
  std::swap(speedref_, other->speedref_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmSensor_descriptor_;
  metadata.reflection = EgmSensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmSensor

// optional .abb.egm.EgmHeader header = 1;
bool EgmSensor::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmSensor::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmSensor::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmSensor::clear_header() {
  if (header_ != NULL) header_->::abb::egm::EgmHeader::Clear();
  clear_has_header();
}
const ::abb::egm::EgmHeader& EgmSensor::header() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmSensor.header)
  return header_ != NULL ? *header_
                         : *::abb::egm::EgmHeader::internal_default_instance();
}
::abb::egm::EgmHeader* EgmSensor::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::abb::egm::EgmHeader;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmSensor.header)
  return header_;
}
::abb::egm::EgmHeader* EgmSensor::release_header() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmSensor.header)
  clear_has_header();
  ::abb::egm::EgmHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void EgmSensor::set_allocated_header(::abb::egm::EgmHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmSensor.header)
}

// optional .abb.egm.EgmPlanned planned = 2;
bool EgmSensor::has_planned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmSensor::set_has_planned() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmSensor::clear_has_planned() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmSensor::clear_planned() {
  if (planned_ != NULL) planned_->::abb::egm::EgmPlanned::Clear();
  clear_has_planned();
}
const ::abb::egm::EgmPlanned& EgmSensor::planned() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmSensor.planned)
  return planned_ != NULL ? *planned_
                         : *::abb::egm::EgmPlanned::internal_default_instance();
}
::abb::egm::EgmPlanned* EgmSensor::mutable_planned() {
  set_has_planned();
  if (planned_ == NULL) {
    planned_ = new ::abb::egm::EgmPlanned;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmSensor.planned)
  return planned_;
}
::abb::egm::EgmPlanned* EgmSensor::release_planned() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmSensor.planned)
  clear_has_planned();
  ::abb::egm::EgmPlanned* temp = planned_;
  planned_ = NULL;
  return temp;
}
void EgmSensor::set_allocated_planned(::abb::egm::EgmPlanned* planned) {
  delete planned_;
  planned_ = planned;
  if (planned) {
    set_has_planned();
  } else {
    clear_has_planned();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmSensor.planned)
}

// optional .abb.egm.EgmSpeedRef speedRef = 3;
bool EgmSensor::has_speedref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EgmSensor::set_has_speedref() {
  _has_bits_[0] |= 0x00000004u;
}
void EgmSensor::clear_has_speedref() {
  _has_bits_[0] &= ~0x00000004u;
}
void EgmSensor::clear_speedref() {
  if (speedref_ != NULL) speedref_->::abb::egm::EgmSpeedRef::Clear();
  clear_has_speedref();
}
const ::abb::egm::EgmSpeedRef& EgmSensor::speedref() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmSensor.speedRef)
  return speedref_ != NULL ? *speedref_
                         : *::abb::egm::EgmSpeedRef::internal_default_instance();
}
::abb::egm::EgmSpeedRef* EgmSensor::mutable_speedref() {
  set_has_speedref();
  if (speedref_ == NULL) {
    speedref_ = new ::abb::egm::EgmSpeedRef;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmSensor.speedRef)
  return speedref_;
}
::abb::egm::EgmSpeedRef* EgmSensor::release_speedref() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmSensor.speedRef)
  clear_has_speedref();
  ::abb::egm::EgmSpeedRef* temp = speedref_;
  speedref_ = NULL;
  return temp;
}
void EgmSensor::set_allocated_speedref(::abb::egm::EgmSpeedRef* speedref) {
  delete speedref_;
  speedref_ = speedref;
  if (speedref) {
    set_has_speedref();
  } else {
    clear_has_speedref();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmSensor.speedRef)
}

inline const EgmSensor* EgmSensor::internal_default_instance() {
  return &EgmSensor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EgmSensorPathCorr::kHeaderFieldNumber;
const int EgmSensorPathCorr::kPathCorrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EgmSensorPathCorr::EgmSensorPathCorr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_egm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:abb.egm.EgmSensorPathCorr)
}

void EgmSensorPathCorr::InitAsDefaultInstance() {
  header_ = const_cast< ::abb::egm::EgmHeader*>(
      ::abb::egm::EgmHeader::internal_default_instance());
  pathcorr_ = const_cast< ::abb::egm::EgmPathCorr*>(
      ::abb::egm::EgmPathCorr::internal_default_instance());
}

EgmSensorPathCorr::EgmSensorPathCorr(const EgmSensorPathCorr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:abb.egm.EgmSensorPathCorr)
}

void EgmSensorPathCorr::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  pathcorr_ = NULL;
}

EgmSensorPathCorr::~EgmSensorPathCorr() {
  // @@protoc_insertion_point(destructor:abb.egm.EgmSensorPathCorr)
  SharedDtor();
}

void EgmSensorPathCorr::SharedDtor() {
  if (this != &EgmSensorPathCorr_default_instance_.get()) {
    delete header_;
    delete pathcorr_;
  }
}

void EgmSensorPathCorr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EgmSensorPathCorr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EgmSensorPathCorr_descriptor_;
}

const EgmSensorPathCorr& EgmSensorPathCorr::default_instance() {
  protobuf_InitDefaults_egm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EgmSensorPathCorr> EgmSensorPathCorr_default_instance_;

EgmSensorPathCorr* EgmSensorPathCorr::New(::google::protobuf::Arena* arena) const {
  EgmSensorPathCorr* n = new EgmSensorPathCorr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EgmSensorPathCorr::Clear() {
// @@protoc_insertion_point(message_clear_start:abb.egm.EgmSensorPathCorr)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      if (header_ != NULL) header_->::abb::egm::EgmHeader::Clear();
    }
    if (has_pathcorr()) {
      if (pathcorr_ != NULL) pathcorr_->::abb::egm::EgmPathCorr::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EgmSensorPathCorr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:abb.egm.EgmSensorPathCorr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .abb.egm.EgmHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pathCorr;
        break;
      }

      // optional .abb.egm.EgmPathCorr pathCorr = 2;
      case 2: {
        if (tag == 18) {
         parse_pathCorr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathcorr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:abb.egm.EgmSensorPathCorr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:abb.egm.EgmSensorPathCorr)
  return false;
#undef DO_
}

void EgmSensorPathCorr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:abb.egm.EgmSensorPathCorr)
  // optional .abb.egm.EgmHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .abb.egm.EgmPathCorr pathCorr = 2;
  if (has_pathcorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pathcorr_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:abb.egm.EgmSensorPathCorr)
}

::google::protobuf::uint8* EgmSensorPathCorr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:abb.egm.EgmSensorPathCorr)
  // optional .abb.egm.EgmHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .abb.egm.EgmPathCorr pathCorr = 2;
  if (has_pathcorr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pathcorr_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:abb.egm.EgmSensorPathCorr)
  return target;
}

size_t EgmSensorPathCorr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:abb.egm.EgmSensorPathCorr)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .abb.egm.EgmHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .abb.egm.EgmPathCorr pathCorr = 2;
    if (has_pathcorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pathcorr_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EgmSensorPathCorr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:abb.egm.EgmSensorPathCorr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EgmSensorPathCorr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EgmSensorPathCorr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:abb.egm.EgmSensorPathCorr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:abb.egm.EgmSensorPathCorr)
    UnsafeMergeFrom(*source);
  }
}

void EgmSensorPathCorr::MergeFrom(const EgmSensorPathCorr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:abb.egm.EgmSensorPathCorr)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EgmSensorPathCorr::UnsafeMergeFrom(const EgmSensorPathCorr& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::abb::egm::EgmHeader::MergeFrom(from.header());
    }
    if (from.has_pathcorr()) {
      mutable_pathcorr()->::abb::egm::EgmPathCorr::MergeFrom(from.pathcorr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void EgmSensorPathCorr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:abb.egm.EgmSensorPathCorr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgmSensorPathCorr::CopyFrom(const EgmSensorPathCorr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:abb.egm.EgmSensorPathCorr)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EgmSensorPathCorr::IsInitialized() const {

  if (has_pathcorr()) {
    if (!this->pathcorr_->IsInitialized()) return false;
  }
  return true;
}

void EgmSensorPathCorr::Swap(EgmSensorPathCorr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EgmSensorPathCorr::InternalSwap(EgmSensorPathCorr* other) {
  std::swap(header_, other->header_);
  std::swap(pathcorr_, other->pathcorr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EgmSensorPathCorr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EgmSensorPathCorr_descriptor_;
  metadata.reflection = EgmSensorPathCorr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EgmSensorPathCorr

// optional .abb.egm.EgmHeader header = 1;
bool EgmSensorPathCorr::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EgmSensorPathCorr::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void EgmSensorPathCorr::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void EgmSensorPathCorr::clear_header() {
  if (header_ != NULL) header_->::abb::egm::EgmHeader::Clear();
  clear_has_header();
}
const ::abb::egm::EgmHeader& EgmSensorPathCorr::header() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmSensorPathCorr.header)
  return header_ != NULL ? *header_
                         : *::abb::egm::EgmHeader::internal_default_instance();
}
::abb::egm::EgmHeader* EgmSensorPathCorr::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::abb::egm::EgmHeader;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmSensorPathCorr.header)
  return header_;
}
::abb::egm::EgmHeader* EgmSensorPathCorr::release_header() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmSensorPathCorr.header)
  clear_has_header();
  ::abb::egm::EgmHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void EgmSensorPathCorr::set_allocated_header(::abb::egm::EgmHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmSensorPathCorr.header)
}

// optional .abb.egm.EgmPathCorr pathCorr = 2;
bool EgmSensorPathCorr::has_pathcorr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EgmSensorPathCorr::set_has_pathcorr() {
  _has_bits_[0] |= 0x00000002u;
}
void EgmSensorPathCorr::clear_has_pathcorr() {
  _has_bits_[0] &= ~0x00000002u;
}
void EgmSensorPathCorr::clear_pathcorr() {
  if (pathcorr_ != NULL) pathcorr_->::abb::egm::EgmPathCorr::Clear();
  clear_has_pathcorr();
}
const ::abb::egm::EgmPathCorr& EgmSensorPathCorr::pathcorr() const {
  // @@protoc_insertion_point(field_get:abb.egm.EgmSensorPathCorr.pathCorr)
  return pathcorr_ != NULL ? *pathcorr_
                         : *::abb::egm::EgmPathCorr::internal_default_instance();
}
::abb::egm::EgmPathCorr* EgmSensorPathCorr::mutable_pathcorr() {
  set_has_pathcorr();
  if (pathcorr_ == NULL) {
    pathcorr_ = new ::abb::egm::EgmPathCorr;
  }
  // @@protoc_insertion_point(field_mutable:abb.egm.EgmSensorPathCorr.pathCorr)
  return pathcorr_;
}
::abb::egm::EgmPathCorr* EgmSensorPathCorr::release_pathcorr() {
  // @@protoc_insertion_point(field_release:abb.egm.EgmSensorPathCorr.pathCorr)
  clear_has_pathcorr();
  ::abb::egm::EgmPathCorr* temp = pathcorr_;
  pathcorr_ = NULL;
  return temp;
}
void EgmSensorPathCorr::set_allocated_pathcorr(::abb::egm::EgmPathCorr* pathcorr) {
  delete pathcorr_;
  pathcorr_ = pathcorr;
  if (pathcorr) {
    set_has_pathcorr();
  } else {
    clear_has_pathcorr();
  }
  // @@protoc_insertion_point(field_set_allocated:abb.egm.EgmSensorPathCorr.pathCorr)
}

inline const EgmSensorPathCorr* EgmSensorPathCorr::internal_default_instance() {
  return &EgmSensorPathCorr_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace egm
}  // namespace abb

// @@protoc_insertion_point(global_scope)
